"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var api_1 = require("./api");
var query_1 = require("./generated/cosmos/bank/v1beta1/query");
var api;
var chainUrl = "localhost:26657";
/***

NOTE: The first time running these test will fail without funding the test user.

Fund with:
./bin/starsd tx bank send validator [address] 100000000ustarx --keyring-backend test --chain-id localnet-1

*/
describe("StargazeApi", function () {
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, api_1.StargazeApi.connect({
                        connection: {
                            type: "tendermint",
                            url: chainUrl
                        }
                    })];
                case 1:
                    api = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    describe("Queries", function () {
        it("should fetch balances using tendermint client", function () { return __awaiter(void 0, void 0, void 0, function () {
            var impl, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        impl = new query_1.QueryClientImpl(api.connection.queryConnection);
                        return [4 /*yield*/, impl.AllBalances({
                                address: "stars1wsrvdmgfs0gugen4t4ak7hnudhy9mgnpcys5gn"
                            })];
                    case 1:
                        res = _a.sent();
                        expect(res.balances).toHaveLength(4);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // describe('Txs', () => {
    // 	it('should post a tx on chain', async () => {
    // 		const mnemonic =
    // 			'surround miss nominee dream gap cross assault thank captain prosper drop duty group candy wealth weather scale put';
    // 		const wallet = await DirectSecp256k1HdWallet.fromMnemonic(
    // 			mnemonic,
    // 			{ prefix: 'stars' }
    // 		);
    // 		const [{ address }] = await wallet.getAccounts();
    // 		const msgPostTypeUrl = '/stargaze.curating.v1beta1.MsgPost';
    // 		const registry = new Registry();
    // 		registry.register(msgPostTypeUrl, MsgPost);
    // 		const client = await SigningStargateClient.connectWithSigner(
    // 			chainUrl,
    // 			wallet,
    // 			{ registry: registry }
    // 		);
    // 		const msg = MsgPost.fromPartial({
    // 			vendorId: 1,
    // 			postId: '1',
    // 			creator: address,
    // 			rewardAccount: address,
    // 			body: 'This is a tweet',
    // 		});
    // 		const msgAny = {
    // 			typeUrl: msgPostTypeUrl,
    // 			value: msg,
    // 		};
    // 		const fee = {
    // 			amount: coins(10000000, 'ustarx'),
    // 			gas: '180000', // 180k
    // 		};
    // 		const memo = 'Use your power wisely';
    // 		const result = await client.signAndBroadcast(
    // 			address,
    // 			[msgAny],
    // 			fee,
    // 			memo
    // 		);
    // 		assertIsBroadcastTxSuccess(result);
    // 	});
    // });
});
