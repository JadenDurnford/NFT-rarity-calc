import { Any } from "../../../google/protobuf/any";
import * as Long from "long";
import { Writer, Reader } from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.authz.v1beta1";
/**
 * GenericAuthorization gives the grantee unrestricted permissions to execute
 * the provided method on behalf of the granter's account.
 */
export interface GenericAuthorization {
    /**
     * method name to grant unrestricted permissions to execute
     * Note: MethodName() is already a method on `GenericAuthorization` type,
     * we need some custom naming here so using `MessageName`
     */
    methodName: string;
}
/**
 * AuthorizationGrant gives permissions to execute
 * the provide method with expiration time.
 */
export interface AuthorizationGrant {
    authorization?: Any;
    expiration?: Date;
}
export declare const GenericAuthorization: {
    encode(message: GenericAuthorization, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): GenericAuthorization;
    fromJSON(object: any): GenericAuthorization;
    fromPartial(object: DeepPartial<GenericAuthorization>): GenericAuthorization;
    toJSON(message: GenericAuthorization): unknown;
};
export declare const AuthorizationGrant: {
    encode(message: AuthorizationGrant, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): AuthorizationGrant;
    fromJSON(object: any): AuthorizationGrant;
    fromPartial(object: DeepPartial<AuthorizationGrant>): AuthorizationGrant;
    toJSON(message: AuthorizationGrant): unknown;
};
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
