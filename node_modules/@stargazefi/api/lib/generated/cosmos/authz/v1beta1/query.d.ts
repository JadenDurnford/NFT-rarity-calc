import { AuthorizationGrant } from "../../../cosmos/authz/v1beta1/authz";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Reader, Writer } from "protobufjs/minimal";
import * as Long from "long";
export declare const protobufPackage = "cosmos.authz.v1beta1";
/** QueryAuthorizationRequest is the request type for the Query/Authorization RPC method. */
export interface QueryAuthorizationRequest {
    granter: string;
    grantee: string;
    methodName: string;
}
/** QueryAuthorizationResponse is the response type for the Query/Authorization RPC method. */
export interface QueryAuthorizationResponse {
    /** authorization is a authorization granted for grantee by granter. */
    authorization?: AuthorizationGrant;
}
/** QueryAuthorizationsRequest is the request type for the Query/Authorizations RPC method. */
export interface QueryAuthorizationsRequest {
    granter: string;
    grantee: string;
    /** pagination defines an pagination for the request. */
    pagination?: PageRequest;
}
/** QueryAuthorizationsResponse is the response type for the Query/Authorizations RPC method. */
export interface QueryAuthorizationsResponse {
    /** authorizations is a list of grants granted for grantee by granter. */
    authorizations: AuthorizationGrant[];
    /** pagination defines an pagination for the response. */
    pagination?: PageResponse;
}
export declare const QueryAuthorizationRequest: {
    encode(message: QueryAuthorizationRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryAuthorizationRequest;
    fromJSON(object: any): QueryAuthorizationRequest;
    fromPartial(object: DeepPartial<QueryAuthorizationRequest>): QueryAuthorizationRequest;
    toJSON(message: QueryAuthorizationRequest): unknown;
};
export declare const QueryAuthorizationResponse: {
    encode(message: QueryAuthorizationResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryAuthorizationResponse;
    fromJSON(object: any): QueryAuthorizationResponse;
    fromPartial(object: DeepPartial<QueryAuthorizationResponse>): QueryAuthorizationResponse;
    toJSON(message: QueryAuthorizationResponse): unknown;
};
export declare const QueryAuthorizationsRequest: {
    encode(message: QueryAuthorizationsRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryAuthorizationsRequest;
    fromJSON(object: any): QueryAuthorizationsRequest;
    fromPartial(object: DeepPartial<QueryAuthorizationsRequest>): QueryAuthorizationsRequest;
    toJSON(message: QueryAuthorizationsRequest): unknown;
};
export declare const QueryAuthorizationsResponse: {
    encode(message: QueryAuthorizationsResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryAuthorizationsResponse;
    fromJSON(object: any): QueryAuthorizationsResponse;
    fromPartial(object: DeepPartial<QueryAuthorizationsResponse>): QueryAuthorizationsResponse;
    toJSON(message: QueryAuthorizationsResponse): unknown;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /**
     * Returns any `Authorization` (or `nil`), with the expiration time, granted to the grantee by the granter for the
     * provided msg type.
     */
    Authorization(request: QueryAuthorizationRequest): Promise<QueryAuthorizationResponse>;
    /** Returns list of `Authorization`, granted to the grantee by the granter. */
    Authorizations(request: QueryAuthorizationsRequest): Promise<QueryAuthorizationsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Authorization(request: QueryAuthorizationRequest): Promise<QueryAuthorizationResponse>;
    Authorizations(request: QueryAuthorizationsRequest): Promise<QueryAuthorizationsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
