"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.ReflectionServiceClientImpl = exports.ListImplementationsResponse = exports.ListImplementationsRequest = exports.ListAllInterfacesResponse = exports.ListAllInterfacesRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.base.reflection.v1beta1";
var baseListAllInterfacesRequest = {};
exports.ListAllInterfacesRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseListAllInterfacesRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseListAllInterfacesRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseListAllInterfacesRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseListAllInterfacesResponse = { interfaceNames: "" };
exports.ListAllInterfacesResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.interfaceNames; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseListAllInterfacesResponse);
        message.interfaceNames = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.interfaceNames.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseListAllInterfacesResponse);
        message.interfaceNames = [];
        if (object.interfaceNames !== undefined && object.interfaceNames !== null) {
            for (var _i = 0, _a = object.interfaceNames; _i < _a.length; _i++) {
                var e = _a[_i];
                message.interfaceNames.push(String(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseListAllInterfacesResponse);
        message.interfaceNames = [];
        if (object.interfaceNames !== undefined && object.interfaceNames !== null) {
            for (var _i = 0, _a = object.interfaceNames; _i < _a.length; _i++) {
                var e = _a[_i];
                message.interfaceNames.push(e);
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.interfaceNames) {
            obj.interfaceNames = message.interfaceNames.map(function (e) { return e; });
        }
        else {
            obj.interfaceNames = [];
        }
        return obj;
    }
};
var baseListImplementationsRequest = { interfaceName: "" };
exports.ListImplementationsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.interfaceName !== "") {
            writer.uint32(10).string(message.interfaceName);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseListImplementationsRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.interfaceName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseListImplementationsRequest);
        if (object.interfaceName !== undefined && object.interfaceName !== null) {
            message.interfaceName = String(object.interfaceName);
        }
        else {
            message.interfaceName = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseListImplementationsRequest);
        if (object.interfaceName !== undefined && object.interfaceName !== null) {
            message.interfaceName = object.interfaceName;
        }
        else {
            message.interfaceName = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.interfaceName !== undefined &&
            (obj.interfaceName = message.interfaceName);
        return obj;
    }
};
var baseListImplementationsResponse = {
    implementationMessageNames: ""
};
exports.ListImplementationsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.implementationMessageNames; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseListImplementationsResponse);
        message.implementationMessageNames = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.implementationMessageNames.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseListImplementationsResponse);
        message.implementationMessageNames = [];
        if (object.implementationMessageNames !== undefined &&
            object.implementationMessageNames !== null) {
            for (var _i = 0, _a = object.implementationMessageNames; _i < _a.length; _i++) {
                var e = _a[_i];
                message.implementationMessageNames.push(String(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseListImplementationsResponse);
        message.implementationMessageNames = [];
        if (object.implementationMessageNames !== undefined &&
            object.implementationMessageNames !== null) {
            for (var _i = 0, _a = object.implementationMessageNames; _i < _a.length; _i++) {
                var e = _a[_i];
                message.implementationMessageNames.push(e);
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.implementationMessageNames) {
            obj.implementationMessageNames = message.implementationMessageNames.map(function (e) { return e; });
        }
        else {
            obj.implementationMessageNames = [];
        }
        return obj;
    }
};
var ReflectionServiceClientImpl = /** @class */ (function () {
    function ReflectionServiceClientImpl(rpc) {
        this.rpc = rpc;
    }
    ReflectionServiceClientImpl.prototype.ListAllInterfaces = function (request) {
        var data = exports.ListAllInterfacesRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v1beta1.ReflectionService", "ListAllInterfaces", data);
        return promise.then(function (data) {
            return exports.ListAllInterfacesResponse.decode(new minimal_1.Reader(data));
        });
    };
    ReflectionServiceClientImpl.prototype.ListImplementations = function (request) {
        var data = exports.ListImplementationsRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v1beta1.ReflectionService", "ListImplementations", data);
        return promise.then(function (data) {
            return exports.ListImplementationsResponse.decode(new minimal_1.Reader(data));
        });
    };
    return ReflectionServiceClientImpl;
}());
exports.ReflectionServiceClientImpl = ReflectionServiceClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
