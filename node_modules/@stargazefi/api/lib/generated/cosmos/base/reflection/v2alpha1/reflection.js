"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.ReflectionServiceClientImpl = exports.QueryMethodDescriptor = exports.QueryServiceDescriptor = exports.QueryServicesDescriptor = exports.GetTxDescriptorResponse = exports.GetTxDescriptorRequest = exports.GetQueryServicesDescriptorResponse = exports.GetQueryServicesDescriptorRequest = exports.GetConfigurationDescriptorResponse = exports.GetConfigurationDescriptorRequest = exports.GetCodecDescriptorResponse = exports.GetCodecDescriptorRequest = exports.GetChainDescriptorResponse = exports.GetChainDescriptorRequest = exports.GetAuthnDescriptorResponse = exports.GetAuthnDescriptorRequest = exports.ServiceMsgDescriptor = exports.MsgDescriptor = exports.ConfigurationDescriptor = exports.InterfaceAcceptingMessageDescriptor = exports.InterfaceImplementerDescriptor = exports.InterfaceDescriptor = exports.CodecDescriptor = exports.ChainDescriptor = exports.SigningModeDescriptor = exports.AuthnDescriptor = exports.TxDescriptor = exports.AppDescriptor = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.base.reflection.v2alpha1";
var baseAppDescriptor = {};
exports.AppDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.authn !== undefined) {
            exports.AuthnDescriptor.encode(message.authn, writer.uint32(10).fork()).ldelim();
        }
        if (message.chain !== undefined) {
            exports.ChainDescriptor.encode(message.chain, writer.uint32(18).fork()).ldelim();
        }
        if (message.codec !== undefined) {
            exports.CodecDescriptor.encode(message.codec, writer.uint32(26).fork()).ldelim();
        }
        if (message.configuration !== undefined) {
            exports.ConfigurationDescriptor.encode(message.configuration, writer.uint32(34).fork()).ldelim();
        }
        if (message.queryServices !== undefined) {
            exports.QueryServicesDescriptor.encode(message.queryServices, writer.uint32(42).fork()).ldelim();
        }
        if (message.tx !== undefined) {
            exports.TxDescriptor.encode(message.tx, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseAppDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authn = exports.AuthnDescriptor.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.chain = exports.ChainDescriptor.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.codec = exports.CodecDescriptor.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.configuration = exports.ConfigurationDescriptor.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.queryServices = exports.QueryServicesDescriptor.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.tx = exports.TxDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseAppDescriptor);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromJSON(object.authn);
        }
        else {
            message.authn = undefined;
        }
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromJSON(object.chain);
        }
        else {
            message.chain = undefined;
        }
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromJSON(object.codec);
        }
        else {
            message.codec = undefined;
        }
        if (object.configuration !== undefined && object.configuration !== null) {
            message.configuration = exports.ConfigurationDescriptor.fromJSON(object.configuration);
        }
        else {
            message.configuration = undefined;
        }
        if (object.queryServices !== undefined && object.queryServices !== null) {
            message.queryServices = exports.QueryServicesDescriptor.fromJSON(object.queryServices);
        }
        else {
            message.queryServices = undefined;
        }
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromJSON(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseAppDescriptor);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromPartial(object.authn);
        }
        else {
            message.authn = undefined;
        }
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromPartial(object.chain);
        }
        else {
            message.chain = undefined;
        }
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromPartial(object.codec);
        }
        else {
            message.codec = undefined;
        }
        if (object.configuration !== undefined && object.configuration !== null) {
            message.configuration = exports.ConfigurationDescriptor.fromPartial(object.configuration);
        }
        else {
            message.configuration = undefined;
        }
        if (object.queryServices !== undefined && object.queryServices !== null) {
            message.queryServices = exports.QueryServicesDescriptor.fromPartial(object.queryServices);
        }
        else {
            message.queryServices = undefined;
        }
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromPartial(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.authn !== undefined &&
            (obj.authn = message.authn
                ? exports.AuthnDescriptor.toJSON(message.authn)
                : undefined);
        message.chain !== undefined &&
            (obj.chain = message.chain
                ? exports.ChainDescriptor.toJSON(message.chain)
                : undefined);
        message.codec !== undefined &&
            (obj.codec = message.codec
                ? exports.CodecDescriptor.toJSON(message.codec)
                : undefined);
        message.configuration !== undefined &&
            (obj.configuration = message.configuration
                ? exports.ConfigurationDescriptor.toJSON(message.configuration)
                : undefined);
        message.queryServices !== undefined &&
            (obj.queryServices = message.queryServices
                ? exports.QueryServicesDescriptor.toJSON(message.queryServices)
                : undefined);
        message.tx !== undefined &&
            (obj.tx = message.tx ? exports.TxDescriptor.toJSON(message.tx) : undefined);
        return obj;
    }
};
var baseTxDescriptor = { fullname: "" };
exports.TxDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        for (var _i = 0, _a = message.msgs; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.MsgDescriptor.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseTxDescriptor);
        message.msgs = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.msgs.push(exports.MsgDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseTxDescriptor);
        message.msgs = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.msgs !== undefined && object.msgs !== null) {
            for (var _i = 0, _a = object.msgs; _i < _a.length; _i++) {
                var e = _a[_i];
                message.msgs.push(exports.MsgDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseTxDescriptor);
        message.msgs = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.msgs !== undefined && object.msgs !== null) {
            for (var _i = 0, _a = object.msgs; _i < _a.length; _i++) {
                var e = _a[_i];
                message.msgs.push(exports.MsgDescriptor.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        if (message.msgs) {
            obj.msgs = message.msgs.map(function (e) {
                return e ? exports.MsgDescriptor.toJSON(e) : undefined;
            });
        }
        else {
            obj.msgs = [];
        }
        return obj;
    }
};
var baseAuthnDescriptor = {};
exports.AuthnDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.signModes; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.SigningModeDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseAuthnDescriptor);
        message.signModes = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.signModes.push(exports.SigningModeDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseAuthnDescriptor);
        message.signModes = [];
        if (object.signModes !== undefined && object.signModes !== null) {
            for (var _i = 0, _a = object.signModes; _i < _a.length; _i++) {
                var e = _a[_i];
                message.signModes.push(exports.SigningModeDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseAuthnDescriptor);
        message.signModes = [];
        if (object.signModes !== undefined && object.signModes !== null) {
            for (var _i = 0, _a = object.signModes; _i < _a.length; _i++) {
                var e = _a[_i];
                message.signModes.push(exports.SigningModeDescriptor.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.signModes) {
            obj.signModes = message.signModes.map(function (e) {
                return e ? exports.SigningModeDescriptor.toJSON(e) : undefined;
            });
        }
        else {
            obj.signModes = [];
        }
        return obj;
    }
};
var baseSigningModeDescriptor = {
    name: "",
    number: 0,
    authnInfoProviderMethodFullname: ""
};
exports.SigningModeDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.number !== 0) {
            writer.uint32(16).int32(message.number);
        }
        if (message.authnInfoProviderMethodFullname !== "") {
            writer.uint32(26).string(message.authnInfoProviderMethodFullname);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseSigningModeDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.number = reader.int32();
                    break;
                case 3:
                    message.authnInfoProviderMethodFullname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseSigningModeDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.number !== undefined && object.number !== null) {
            message.number = Number(object.number);
        }
        else {
            message.number = 0;
        }
        if (object.authnInfoProviderMethodFullname !== undefined &&
            object.authnInfoProviderMethodFullname !== null) {
            message.authnInfoProviderMethodFullname = String(object.authnInfoProviderMethodFullname);
        }
        else {
            message.authnInfoProviderMethodFullname = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSigningModeDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.number !== undefined && object.number !== null) {
            message.number = object.number;
        }
        else {
            message.number = 0;
        }
        if (object.authnInfoProviderMethodFullname !== undefined &&
            object.authnInfoProviderMethodFullname !== null) {
            message.authnInfoProviderMethodFullname =
                object.authnInfoProviderMethodFullname;
        }
        else {
            message.authnInfoProviderMethodFullname = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.number !== undefined && (obj.number = message.number);
        message.authnInfoProviderMethodFullname !== undefined &&
            (obj.authnInfoProviderMethodFullname =
                message.authnInfoProviderMethodFullname);
        return obj;
    }
};
var baseChainDescriptor = { id: "" };
exports.ChainDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseChainDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseChainDescriptor);
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseChainDescriptor);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    }
};
var baseCodecDescriptor = {};
exports.CodecDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.interfaces; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.InterfaceDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseCodecDescriptor);
        message.interfaces = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.interfaces.push(exports.InterfaceDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseCodecDescriptor);
        message.interfaces = [];
        if (object.interfaces !== undefined && object.interfaces !== null) {
            for (var _i = 0, _a = object.interfaces; _i < _a.length; _i++) {
                var e = _a[_i];
                message.interfaces.push(exports.InterfaceDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseCodecDescriptor);
        message.interfaces = [];
        if (object.interfaces !== undefined && object.interfaces !== null) {
            for (var _i = 0, _a = object.interfaces; _i < _a.length; _i++) {
                var e = _a[_i];
                message.interfaces.push(exports.InterfaceDescriptor.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.interfaces) {
            obj.interfaces = message.interfaces.map(function (e) {
                return e ? exports.InterfaceDescriptor.toJSON(e) : undefined;
            });
        }
        else {
            obj.interfaces = [];
        }
        return obj;
    }
};
var baseInterfaceDescriptor = { fullname: "" };
exports.InterfaceDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        for (var _i = 0, _a = message.interfaceAcceptingMessages; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.InterfaceAcceptingMessageDescriptor.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (var _b = 0, _c = message.interfaceImplementers; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.InterfaceImplementerDescriptor.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseInterfaceDescriptor);
        message.interfaceAcceptingMessages = [];
        message.interfaceImplementers = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.interfaceAcceptingMessages.push(exports.InterfaceAcceptingMessageDescriptor.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.interfaceImplementers.push(exports.InterfaceImplementerDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseInterfaceDescriptor);
        message.interfaceAcceptingMessages = [];
        message.interfaceImplementers = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.interfaceAcceptingMessages !== undefined &&
            object.interfaceAcceptingMessages !== null) {
            for (var _i = 0, _a = object.interfaceAcceptingMessages; _i < _a.length; _i++) {
                var e = _a[_i];
                message.interfaceAcceptingMessages.push(exports.InterfaceAcceptingMessageDescriptor.fromJSON(e));
            }
        }
        if (object.interfaceImplementers !== undefined &&
            object.interfaceImplementers !== null) {
            for (var _b = 0, _c = object.interfaceImplementers; _b < _c.length; _b++) {
                var e = _c[_b];
                message.interfaceImplementers.push(exports.InterfaceImplementerDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseInterfaceDescriptor);
        message.interfaceAcceptingMessages = [];
        message.interfaceImplementers = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.interfaceAcceptingMessages !== undefined &&
            object.interfaceAcceptingMessages !== null) {
            for (var _i = 0, _a = object.interfaceAcceptingMessages; _i < _a.length; _i++) {
                var e = _a[_i];
                message.interfaceAcceptingMessages.push(exports.InterfaceAcceptingMessageDescriptor.fromPartial(e));
            }
        }
        if (object.interfaceImplementers !== undefined &&
            object.interfaceImplementers !== null) {
            for (var _b = 0, _c = object.interfaceImplementers; _b < _c.length; _b++) {
                var e = _c[_b];
                message.interfaceImplementers.push(exports.InterfaceImplementerDescriptor.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        if (message.interfaceAcceptingMessages) {
            obj.interfaceAcceptingMessages = message.interfaceAcceptingMessages.map(function (e) { return (e ? exports.InterfaceAcceptingMessageDescriptor.toJSON(e) : undefined); });
        }
        else {
            obj.interfaceAcceptingMessages = [];
        }
        if (message.interfaceImplementers) {
            obj.interfaceImplementers = message.interfaceImplementers.map(function (e) {
                return e ? exports.InterfaceImplementerDescriptor.toJSON(e) : undefined;
            });
        }
        else {
            obj.interfaceImplementers = [];
        }
        return obj;
    }
};
var baseInterfaceImplementerDescriptor = {
    fullname: "",
    typeUrl: ""
};
exports.InterfaceImplementerDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        if (message.typeUrl !== "") {
            writer.uint32(18).string(message.typeUrl);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseInterfaceImplementerDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.typeUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseInterfaceImplementerDescriptor);
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.typeUrl !== undefined && object.typeUrl !== null) {
            message.typeUrl = String(object.typeUrl);
        }
        else {
            message.typeUrl = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseInterfaceImplementerDescriptor);
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.typeUrl !== undefined && object.typeUrl !== null) {
            message.typeUrl = object.typeUrl;
        }
        else {
            message.typeUrl = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);
        return obj;
    }
};
var baseInterfaceAcceptingMessageDescriptor = {
    fullname: "",
    fieldDescriptorNames: ""
};
exports.InterfaceAcceptingMessageDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        for (var _i = 0, _a = message.fieldDescriptorNames; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseInterfaceAcceptingMessageDescriptor);
        message.fieldDescriptorNames = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.fieldDescriptorNames.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseInterfaceAcceptingMessageDescriptor);
        message.fieldDescriptorNames = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.fieldDescriptorNames !== undefined &&
            object.fieldDescriptorNames !== null) {
            for (var _i = 0, _a = object.fieldDescriptorNames; _i < _a.length; _i++) {
                var e = _a[_i];
                message.fieldDescriptorNames.push(String(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseInterfaceAcceptingMessageDescriptor);
        message.fieldDescriptorNames = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.fieldDescriptorNames !== undefined &&
            object.fieldDescriptorNames !== null) {
            for (var _i = 0, _a = object.fieldDescriptorNames; _i < _a.length; _i++) {
                var e = _a[_i];
                message.fieldDescriptorNames.push(e);
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        if (message.fieldDescriptorNames) {
            obj.fieldDescriptorNames = message.fieldDescriptorNames.map(function (e) { return e; });
        }
        else {
            obj.fieldDescriptorNames = [];
        }
        return obj;
    }
};
var baseConfigurationDescriptor = { bech32AccountAddressPrefix: "" };
exports.ConfigurationDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.bech32AccountAddressPrefix !== "") {
            writer.uint32(10).string(message.bech32AccountAddressPrefix);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseConfigurationDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bech32AccountAddressPrefix = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseConfigurationDescriptor);
        if (object.bech32AccountAddressPrefix !== undefined &&
            object.bech32AccountAddressPrefix !== null) {
            message.bech32AccountAddressPrefix = String(object.bech32AccountAddressPrefix);
        }
        else {
            message.bech32AccountAddressPrefix = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseConfigurationDescriptor);
        if (object.bech32AccountAddressPrefix !== undefined &&
            object.bech32AccountAddressPrefix !== null) {
            message.bech32AccountAddressPrefix = object.bech32AccountAddressPrefix;
        }
        else {
            message.bech32AccountAddressPrefix = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.bech32AccountAddressPrefix !== undefined &&
            (obj.bech32AccountAddressPrefix = message.bech32AccountAddressPrefix);
        return obj;
    }
};
var baseMsgDescriptor = {};
exports.MsgDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.serviceMsg !== undefined) {
            exports.ServiceMsgDescriptor.encode(message.serviceMsg, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseMsgDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.serviceMsg = exports.ServiceMsgDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseMsgDescriptor);
        if (object.serviceMsg !== undefined && object.serviceMsg !== null) {
            message.serviceMsg = exports.ServiceMsgDescriptor.fromJSON(object.serviceMsg);
        }
        else {
            message.serviceMsg = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMsgDescriptor);
        if (object.serviceMsg !== undefined && object.serviceMsg !== null) {
            message.serviceMsg = exports.ServiceMsgDescriptor.fromPartial(object.serviceMsg);
        }
        else {
            message.serviceMsg = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.serviceMsg !== undefined &&
            (obj.serviceMsg = message.serviceMsg
                ? exports.ServiceMsgDescriptor.toJSON(message.serviceMsg)
                : undefined);
        return obj;
    }
};
var baseServiceMsgDescriptor = {
    requestFullname: "",
    requestRoute: "",
    requestTypeUrl: "",
    responseFullname: ""
};
exports.ServiceMsgDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.requestFullname !== "") {
            writer.uint32(10).string(message.requestFullname);
        }
        if (message.requestRoute !== "") {
            writer.uint32(18).string(message.requestRoute);
        }
        if (message.requestTypeUrl !== "") {
            writer.uint32(26).string(message.requestTypeUrl);
        }
        if (message.responseFullname !== "") {
            writer.uint32(34).string(message.responseFullname);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseServiceMsgDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestFullname = reader.string();
                    break;
                case 2:
                    message.requestRoute = reader.string();
                    break;
                case 3:
                    message.requestTypeUrl = reader.string();
                    break;
                case 4:
                    message.responseFullname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseServiceMsgDescriptor);
        if (object.requestFullname !== undefined &&
            object.requestFullname !== null) {
            message.requestFullname = String(object.requestFullname);
        }
        else {
            message.requestFullname = "";
        }
        if (object.requestRoute !== undefined && object.requestRoute !== null) {
            message.requestRoute = String(object.requestRoute);
        }
        else {
            message.requestRoute = "";
        }
        if (object.requestTypeUrl !== undefined && object.requestTypeUrl !== null) {
            message.requestTypeUrl = String(object.requestTypeUrl);
        }
        else {
            message.requestTypeUrl = "";
        }
        if (object.responseFullname !== undefined &&
            object.responseFullname !== null) {
            message.responseFullname = String(object.responseFullname);
        }
        else {
            message.responseFullname = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseServiceMsgDescriptor);
        if (object.requestFullname !== undefined &&
            object.requestFullname !== null) {
            message.requestFullname = object.requestFullname;
        }
        else {
            message.requestFullname = "";
        }
        if (object.requestRoute !== undefined && object.requestRoute !== null) {
            message.requestRoute = object.requestRoute;
        }
        else {
            message.requestRoute = "";
        }
        if (object.requestTypeUrl !== undefined && object.requestTypeUrl !== null) {
            message.requestTypeUrl = object.requestTypeUrl;
        }
        else {
            message.requestTypeUrl = "";
        }
        if (object.responseFullname !== undefined &&
            object.responseFullname !== null) {
            message.responseFullname = object.responseFullname;
        }
        else {
            message.responseFullname = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.requestFullname !== undefined &&
            (obj.requestFullname = message.requestFullname);
        message.requestRoute !== undefined &&
            (obj.requestRoute = message.requestRoute);
        message.requestTypeUrl !== undefined &&
            (obj.requestTypeUrl = message.requestTypeUrl);
        message.responseFullname !== undefined &&
            (obj.responseFullname = message.responseFullname);
        return obj;
    }
};
var baseGetAuthnDescriptorRequest = {};
exports.GetAuthnDescriptorRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetAuthnDescriptorRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseGetAuthnDescriptorRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseGetAuthnDescriptorRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseGetAuthnDescriptorResponse = {};
exports.GetAuthnDescriptorResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.authn !== undefined) {
            exports.AuthnDescriptor.encode(message.authn, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetAuthnDescriptorResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authn = exports.AuthnDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGetAuthnDescriptorResponse);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromJSON(object.authn);
        }
        else {
            message.authn = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGetAuthnDescriptorResponse);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromPartial(object.authn);
        }
        else {
            message.authn = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.authn !== undefined &&
            (obj.authn = message.authn
                ? exports.AuthnDescriptor.toJSON(message.authn)
                : undefined);
        return obj;
    }
};
var baseGetChainDescriptorRequest = {};
exports.GetChainDescriptorRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetChainDescriptorRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseGetChainDescriptorRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseGetChainDescriptorRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseGetChainDescriptorResponse = {};
exports.GetChainDescriptorResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.chain !== undefined) {
            exports.ChainDescriptor.encode(message.chain, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetChainDescriptorResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = exports.ChainDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGetChainDescriptorResponse);
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromJSON(object.chain);
        }
        else {
            message.chain = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGetChainDescriptorResponse);
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromPartial(object.chain);
        }
        else {
            message.chain = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.chain !== undefined &&
            (obj.chain = message.chain
                ? exports.ChainDescriptor.toJSON(message.chain)
                : undefined);
        return obj;
    }
};
var baseGetCodecDescriptorRequest = {};
exports.GetCodecDescriptorRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetCodecDescriptorRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseGetCodecDescriptorRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseGetCodecDescriptorRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseGetCodecDescriptorResponse = {};
exports.GetCodecDescriptorResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.codec !== undefined) {
            exports.CodecDescriptor.encode(message.codec, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetCodecDescriptorResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codec = exports.CodecDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGetCodecDescriptorResponse);
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromJSON(object.codec);
        }
        else {
            message.codec = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGetCodecDescriptorResponse);
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromPartial(object.codec);
        }
        else {
            message.codec = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.codec !== undefined &&
            (obj.codec = message.codec
                ? exports.CodecDescriptor.toJSON(message.codec)
                : undefined);
        return obj;
    }
};
var baseGetConfigurationDescriptorRequest = {};
exports.GetConfigurationDescriptorRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetConfigurationDescriptorRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseGetConfigurationDescriptorRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseGetConfigurationDescriptorRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseGetConfigurationDescriptorResponse = {};
exports.GetConfigurationDescriptorResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.config !== undefined) {
            exports.ConfigurationDescriptor.encode(message.config, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetConfigurationDescriptorResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.config = exports.ConfigurationDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGetConfigurationDescriptorResponse);
        if (object.config !== undefined && object.config !== null) {
            message.config = exports.ConfigurationDescriptor.fromJSON(object.config);
        }
        else {
            message.config = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGetConfigurationDescriptorResponse);
        if (object.config !== undefined && object.config !== null) {
            message.config = exports.ConfigurationDescriptor.fromPartial(object.config);
        }
        else {
            message.config = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.config !== undefined &&
            (obj.config = message.config
                ? exports.ConfigurationDescriptor.toJSON(message.config)
                : undefined);
        return obj;
    }
};
var baseGetQueryServicesDescriptorRequest = {};
exports.GetQueryServicesDescriptorRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetQueryServicesDescriptorRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseGetQueryServicesDescriptorRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseGetQueryServicesDescriptorRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseGetQueryServicesDescriptorResponse = {};
exports.GetQueryServicesDescriptorResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.queries !== undefined) {
            exports.QueryServicesDescriptor.encode(message.queries, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetQueryServicesDescriptorResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.queries = exports.QueryServicesDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGetQueryServicesDescriptorResponse);
        if (object.queries !== undefined && object.queries !== null) {
            message.queries = exports.QueryServicesDescriptor.fromJSON(object.queries);
        }
        else {
            message.queries = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGetQueryServicesDescriptorResponse);
        if (object.queries !== undefined && object.queries !== null) {
            message.queries = exports.QueryServicesDescriptor.fromPartial(object.queries);
        }
        else {
            message.queries = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.queries !== undefined &&
            (obj.queries = message.queries
                ? exports.QueryServicesDescriptor.toJSON(message.queries)
                : undefined);
        return obj;
    }
};
var baseGetTxDescriptorRequest = {};
exports.GetTxDescriptorRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetTxDescriptorRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseGetTxDescriptorRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseGetTxDescriptorRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseGetTxDescriptorResponse = {};
exports.GetTxDescriptorResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.tx !== undefined) {
            exports.TxDescriptor.encode(message.tx, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGetTxDescriptorResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tx = exports.TxDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGetTxDescriptorResponse);
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromJSON(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGetTxDescriptorResponse);
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromPartial(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.tx !== undefined &&
            (obj.tx = message.tx ? exports.TxDescriptor.toJSON(message.tx) : undefined);
        return obj;
    }
};
var baseQueryServicesDescriptor = {};
exports.QueryServicesDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.queryServices; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.QueryServiceDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryServicesDescriptor);
        message.queryServices = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.queryServices.push(exports.QueryServiceDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryServicesDescriptor);
        message.queryServices = [];
        if (object.queryServices !== undefined && object.queryServices !== null) {
            for (var _i = 0, _a = object.queryServices; _i < _a.length; _i++) {
                var e = _a[_i];
                message.queryServices.push(exports.QueryServiceDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryServicesDescriptor);
        message.queryServices = [];
        if (object.queryServices !== undefined && object.queryServices !== null) {
            for (var _i = 0, _a = object.queryServices; _i < _a.length; _i++) {
                var e = _a[_i];
                message.queryServices.push(exports.QueryServiceDescriptor.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.queryServices) {
            obj.queryServices = message.queryServices.map(function (e) {
                return e ? exports.QueryServiceDescriptor.toJSON(e) : undefined;
            });
        }
        else {
            obj.queryServices = [];
        }
        return obj;
    }
};
var baseQueryServiceDescriptor = { fullname: "", isModule: false };
exports.QueryServiceDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        if (message.isModule === true) {
            writer.uint32(16).bool(message.isModule);
        }
        for (var _i = 0, _a = message.methods; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.QueryMethodDescriptor.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryServiceDescriptor);
        message.methods = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.isModule = reader.bool();
                    break;
                case 3:
                    message.methods.push(exports.QueryMethodDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryServiceDescriptor);
        message.methods = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.isModule !== undefined && object.isModule !== null) {
            message.isModule = Boolean(object.isModule);
        }
        else {
            message.isModule = false;
        }
        if (object.methods !== undefined && object.methods !== null) {
            for (var _i = 0, _a = object.methods; _i < _a.length; _i++) {
                var e = _a[_i];
                message.methods.push(exports.QueryMethodDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryServiceDescriptor);
        message.methods = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.isModule !== undefined && object.isModule !== null) {
            message.isModule = object.isModule;
        }
        else {
            message.isModule = false;
        }
        if (object.methods !== undefined && object.methods !== null) {
            for (var _i = 0, _a = object.methods; _i < _a.length; _i++) {
                var e = _a[_i];
                message.methods.push(exports.QueryMethodDescriptor.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        message.isModule !== undefined && (obj.isModule = message.isModule);
        if (message.methods) {
            obj.methods = message.methods.map(function (e) {
                return e ? exports.QueryMethodDescriptor.toJSON(e) : undefined;
            });
        }
        else {
            obj.methods = [];
        }
        return obj;
    }
};
var baseQueryMethodDescriptor = { name: "", fullQueryPath: "" };
exports.QueryMethodDescriptor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.fullQueryPath !== "") {
            writer.uint32(18).string(message.fullQueryPath);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryMethodDescriptor);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.fullQueryPath = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryMethodDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.fullQueryPath !== undefined && object.fullQueryPath !== null) {
            message.fullQueryPath = String(object.fullQueryPath);
        }
        else {
            message.fullQueryPath = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryMethodDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.fullQueryPath !== undefined && object.fullQueryPath !== null) {
            message.fullQueryPath = object.fullQueryPath;
        }
        else {
            message.fullQueryPath = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.fullQueryPath !== undefined &&
            (obj.fullQueryPath = message.fullQueryPath);
        return obj;
    }
};
var ReflectionServiceClientImpl = /** @class */ (function () {
    function ReflectionServiceClientImpl(rpc) {
        this.rpc = rpc;
    }
    ReflectionServiceClientImpl.prototype.GetAuthnDescriptor = function (request) {
        var data = exports.GetAuthnDescriptorRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetAuthnDescriptor", data);
        return promise.then(function (data) {
            return exports.GetAuthnDescriptorResponse.decode(new minimal_1.Reader(data));
        });
    };
    ReflectionServiceClientImpl.prototype.GetChainDescriptor = function (request) {
        var data = exports.GetChainDescriptorRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetChainDescriptor", data);
        return promise.then(function (data) {
            return exports.GetChainDescriptorResponse.decode(new minimal_1.Reader(data));
        });
    };
    ReflectionServiceClientImpl.prototype.GetCodecDescriptor = function (request) {
        var data = exports.GetCodecDescriptorRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetCodecDescriptor", data);
        return promise.then(function (data) {
            return exports.GetCodecDescriptorResponse.decode(new minimal_1.Reader(data));
        });
    };
    ReflectionServiceClientImpl.prototype.GetConfigurationDescriptor = function (request) {
        var data = exports.GetConfigurationDescriptorRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetConfigurationDescriptor", data);
        return promise.then(function (data) {
            return exports.GetConfigurationDescriptorResponse.decode(new minimal_1.Reader(data));
        });
    };
    ReflectionServiceClientImpl.prototype.GetQueryServicesDescriptor = function (request) {
        var data = exports.GetQueryServicesDescriptorRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetQueryServicesDescriptor", data);
        return promise.then(function (data) {
            return exports.GetQueryServicesDescriptorResponse.decode(new minimal_1.Reader(data));
        });
    };
    ReflectionServiceClientImpl.prototype.GetTxDescriptor = function (request) {
        var data = exports.GetTxDescriptorRequest.encode(request).finish();
        var promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetTxDescriptor", data);
        return promise.then(function (data) {
            return exports.GetTxDescriptorResponse.decode(new minimal_1.Reader(data));
        });
    };
    return ReflectionServiceClientImpl;
}());
exports.ReflectionServiceClientImpl = ReflectionServiceClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
