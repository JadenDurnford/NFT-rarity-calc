"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.CommitID = exports.StoreInfo = exports.CommitInfo = exports.protobufPackage = void 0;
/* eslint-disable */
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.base.store.v1beta1";
var baseCommitInfo = { version: Long.ZERO };
exports.CommitInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.version.isZero()) {
            writer.uint32(8).int64(message.version);
        }
        for (var _i = 0, _a = message.storeInfos; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.StoreInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseCommitInfo);
        message.storeInfos = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.int64();
                    break;
                case 2:
                    message.storeInfos.push(exports.StoreInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseCommitInfo);
        message.storeInfos = [];
        if (object.version !== undefined && object.version !== null) {
            message.version = Long.fromString(object.version);
        }
        else {
            message.version = Long.ZERO;
        }
        if (object.storeInfos !== undefined && object.storeInfos !== null) {
            for (var _i = 0, _a = object.storeInfos; _i < _a.length; _i++) {
                var e = _a[_i];
                message.storeInfos.push(exports.StoreInfo.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseCommitInfo);
        message.storeInfos = [];
        if (object.version !== undefined && object.version !== null) {
            message.version = object.version;
        }
        else {
            message.version = Long.ZERO;
        }
        if (object.storeInfos !== undefined && object.storeInfos !== null) {
            for (var _i = 0, _a = object.storeInfos; _i < _a.length; _i++) {
                var e = _a[_i];
                message.storeInfos.push(exports.StoreInfo.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.version !== undefined &&
            (obj.version = (message.version || Long.ZERO).toString());
        if (message.storeInfos) {
            obj.storeInfos = message.storeInfos.map(function (e) {
                return e ? exports.StoreInfo.toJSON(e) : undefined;
            });
        }
        else {
            obj.storeInfos = [];
        }
        return obj;
    }
};
var baseStoreInfo = { name: "" };
exports.StoreInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.commitId !== undefined) {
            exports.CommitID.encode(message.commitId, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseStoreInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.commitId = exports.CommitID.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseStoreInfo);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.commitId !== undefined && object.commitId !== null) {
            message.commitId = exports.CommitID.fromJSON(object.commitId);
        }
        else {
            message.commitId = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseStoreInfo);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.commitId !== undefined && object.commitId !== null) {
            message.commitId = exports.CommitID.fromPartial(object.commitId);
        }
        else {
            message.commitId = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.commitId !== undefined &&
            (obj.commitId = message.commitId
                ? exports.CommitID.toJSON(message.commitId)
                : undefined);
        return obj;
    }
};
var baseCommitID = { version: Long.ZERO };
exports.CommitID = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.version.isZero()) {
            writer.uint32(8).int64(message.version);
        }
        if (message.hash.length !== 0) {
            writer.uint32(18).bytes(message.hash);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseCommitID);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.int64();
                    break;
                case 2:
                    message.hash = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseCommitID);
        if (object.version !== undefined && object.version !== null) {
            message.version = Long.fromString(object.version);
        }
        else {
            message.version = Long.ZERO;
        }
        if (object.hash !== undefined && object.hash !== null) {
            message.hash = bytesFromBase64(object.hash);
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseCommitID);
        if (object.version !== undefined && object.version !== null) {
            message.version = object.version;
        }
        else {
            message.version = Long.ZERO;
        }
        if (object.hash !== undefined && object.hash !== null) {
            message.hash = object.hash;
        }
        else {
            message.hash = new Uint8Array();
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.version !== undefined &&
            (obj.version = (message.version || Long.ZERO).toString());
        message.hash !== undefined &&
            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, "base64").toString("binary"); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, "binary").toString("base64"); });
function base64FromBytes(arr) {
    var bin = [];
    for (var i = 0; i < arr.byteLength; ++i) {
        bin.push(String.fromCharCode(arr[i]));
    }
    return btoa(bin.join(""));
}
