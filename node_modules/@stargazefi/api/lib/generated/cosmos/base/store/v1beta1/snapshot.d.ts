import * as Long from "long";
import { Writer, Reader } from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.base.store.v1beta1";
/** SnapshotItem is an item contained in a rootmulti.Store snapshot. */
export interface SnapshotItem {
    store?: SnapshotStoreItem | undefined;
    iavl?: SnapshotIAVLItem | undefined;
}
/** SnapshotStoreItem contains metadata about a snapshotted store. */
export interface SnapshotStoreItem {
    name: string;
}
/** SnapshotIAVLItem is an exported IAVL node. */
export interface SnapshotIAVLItem {
    key: Uint8Array;
    value: Uint8Array;
    version: Long;
    height: number;
}
export declare const SnapshotItem: {
    encode(message: SnapshotItem, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): SnapshotItem;
    fromJSON(object: any): SnapshotItem;
    fromPartial(object: DeepPartial<SnapshotItem>): SnapshotItem;
    toJSON(message: SnapshotItem): unknown;
};
export declare const SnapshotStoreItem: {
    encode(message: SnapshotStoreItem, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): SnapshotStoreItem;
    fromJSON(object: any): SnapshotStoreItem;
    fromPartial(object: DeepPartial<SnapshotStoreItem>): SnapshotStoreItem;
    toJSON(message: SnapshotStoreItem): unknown;
};
export declare const SnapshotIAVLItem: {
    encode(message: SnapshotIAVLItem, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): SnapshotIAVLItem;
    fromJSON(object: any): SnapshotIAVLItem;
    fromPartial(object: DeepPartial<SnapshotIAVLItem>): SnapshotIAVLItem;
    toJSON(message: SnapshotIAVLItem): unknown;
};
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
