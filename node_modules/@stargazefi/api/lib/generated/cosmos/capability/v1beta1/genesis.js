"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.GenesisState = exports.GenesisOwners = exports.protobufPackage = void 0;
/* eslint-disable */
var Long = require("long");
var capability_1 = require("../../../cosmos/capability/v1beta1/capability");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.capability.v1beta1";
var baseGenesisOwners = { index: Long.UZERO };
exports.GenesisOwners = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.index.isZero()) {
            writer.uint32(8).uint64(message.index);
        }
        if (message.indexOwners !== undefined) {
            capability_1.CapabilityOwners.encode(message.indexOwners, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGenesisOwners);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint64();
                    break;
                case 2:
                    message.indexOwners = capability_1.CapabilityOwners.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGenesisOwners);
        if (object.index !== undefined && object.index !== null) {
            message.index = Long.fromString(object.index);
        }
        else {
            message.index = Long.UZERO;
        }
        if (object.indexOwners !== undefined && object.indexOwners !== null) {
            message.indexOwners = capability_1.CapabilityOwners.fromJSON(object.indexOwners);
        }
        else {
            message.indexOwners = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGenesisOwners);
        if (object.index !== undefined && object.index !== null) {
            message.index = object.index;
        }
        else {
            message.index = Long.UZERO;
        }
        if (object.indexOwners !== undefined && object.indexOwners !== null) {
            message.indexOwners = capability_1.CapabilityOwners.fromPartial(object.indexOwners);
        }
        else {
            message.indexOwners = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.index !== undefined &&
            (obj.index = (message.index || Long.UZERO).toString());
        message.indexOwners !== undefined &&
            (obj.indexOwners = message.indexOwners
                ? capability_1.CapabilityOwners.toJSON(message.indexOwners)
                : undefined);
        return obj;
    }
};
var baseGenesisState = { index: Long.UZERO };
exports.GenesisState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.index.isZero()) {
            writer.uint32(8).uint64(message.index);
        }
        for (var _i = 0, _a = message.owners; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.GenesisOwners.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGenesisState);
        message.owners = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint64();
                    break;
                case 2:
                    message.owners.push(exports.GenesisOwners.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGenesisState);
        message.owners = [];
        if (object.index !== undefined && object.index !== null) {
            message.index = Long.fromString(object.index);
        }
        else {
            message.index = Long.UZERO;
        }
        if (object.owners !== undefined && object.owners !== null) {
            for (var _i = 0, _a = object.owners; _i < _a.length; _i++) {
                var e = _a[_i];
                message.owners.push(exports.GenesisOwners.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGenesisState);
        message.owners = [];
        if (object.index !== undefined && object.index !== null) {
            message.index = object.index;
        }
        else {
            message.index = Long.UZERO;
        }
        if (object.owners !== undefined && object.owners !== null) {
            for (var _i = 0, _a = object.owners; _i < _a.length; _i++) {
                var e = _a[_i];
                message.owners.push(exports.GenesisOwners.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.index !== undefined &&
            (obj.index = (message.index || Long.UZERO).toString());
        if (message.owners) {
            obj.owners = message.owners.map(function (e) {
                return e ? exports.GenesisOwners.toJSON(e) : undefined;
            });
        }
        else {
            obj.owners = [];
        }
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
