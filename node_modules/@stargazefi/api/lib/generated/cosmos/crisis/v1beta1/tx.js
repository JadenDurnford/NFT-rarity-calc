"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.MsgClientImpl = exports.MsgVerifyInvariantResponse = exports.MsgVerifyInvariant = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.crisis.v1beta1";
var baseMsgVerifyInvariant = {
    sender: "",
    invariantModuleName: "",
    invariantRoute: ""
};
exports.MsgVerifyInvariant = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.invariantModuleName !== "") {
            writer.uint32(18).string(message.invariantModuleName);
        }
        if (message.invariantRoute !== "") {
            writer.uint32(26).string(message.invariantRoute);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseMsgVerifyInvariant);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.invariantModuleName = reader.string();
                    break;
                case 3:
                    message.invariantRoute = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseMsgVerifyInvariant);
        if (object.sender !== undefined && object.sender !== null) {
            message.sender = String(object.sender);
        }
        else {
            message.sender = "";
        }
        if (object.invariantModuleName !== undefined &&
            object.invariantModuleName !== null) {
            message.invariantModuleName = String(object.invariantModuleName);
        }
        else {
            message.invariantModuleName = "";
        }
        if (object.invariantRoute !== undefined && object.invariantRoute !== null) {
            message.invariantRoute = String(object.invariantRoute);
        }
        else {
            message.invariantRoute = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMsgVerifyInvariant);
        if (object.sender !== undefined && object.sender !== null) {
            message.sender = object.sender;
        }
        else {
            message.sender = "";
        }
        if (object.invariantModuleName !== undefined &&
            object.invariantModuleName !== null) {
            message.invariantModuleName = object.invariantModuleName;
        }
        else {
            message.invariantModuleName = "";
        }
        if (object.invariantRoute !== undefined && object.invariantRoute !== null) {
            message.invariantRoute = object.invariantRoute;
        }
        else {
            message.invariantRoute = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.invariantModuleName !== undefined &&
            (obj.invariantModuleName = message.invariantModuleName);
        message.invariantRoute !== undefined &&
            (obj.invariantRoute = message.invariantRoute);
        return obj;
    }
};
var baseMsgVerifyInvariantResponse = {};
exports.MsgVerifyInvariantResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseMsgVerifyInvariantResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseMsgVerifyInvariantResponse);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseMsgVerifyInvariantResponse);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
    }
    MsgClientImpl.prototype.VerifyInvariant = function (request) {
        var data = exports.MsgVerifyInvariant.encode(request).finish();
        var promise = this.rpc.request("cosmos.crisis.v1beta1.Msg", "VerifyInvariant", data);
        return promise.then(function (data) {
            return exports.MsgVerifyInvariantResponse.decode(new minimal_1.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
