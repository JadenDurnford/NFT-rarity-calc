import { Writer, Reader } from "protobufjs/minimal";
import * as Long from "long";
export declare const protobufPackage = "cosmos.crypto.secp256r1";
/** PubKey defines a secp256r1 ECDSA public key. */
export interface PubKey {
    /**
     * Point on secp256r1 curve in a compressed representation as specified in section
     * 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
     */
    key: Uint8Array;
}
/** PrivKey defines a secp256r1 ECDSA private key. */
export interface PrivKey {
    /** secret number serialized using big-endian encoding */
    secret: Uint8Array;
}
export declare const PubKey: {
    encode(message: PubKey, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): PubKey;
    fromJSON(object: any): PubKey;
    fromPartial(object: DeepPartial<PubKey>): PubKey;
    toJSON(message: PubKey): unknown;
};
export declare const PrivKey: {
    encode(message: PrivKey, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): PrivKey;
    fromJSON(object: any): PrivKey;
    fromPartial(object: DeepPartial<PrivKey>): PrivKey;
    toJSON(message: PrivKey): unknown;
};
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
