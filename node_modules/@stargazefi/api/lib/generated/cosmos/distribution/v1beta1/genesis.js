"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.GenesisState = exports.ValidatorSlashEventRecord = exports.DelegatorStartingInfoRecord = exports.ValidatorCurrentRewardsRecord = exports.ValidatorHistoricalRewardsRecord = exports.ValidatorAccumulatedCommissionRecord = exports.ValidatorOutstandingRewardsRecord = exports.DelegatorWithdrawInfo = exports.protobufPackage = void 0;
/* eslint-disable */
var distribution_1 = require("../../../cosmos/distribution/v1beta1/distribution");
var Long = require("long");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.distribution.v1beta1";
var baseDelegatorWithdrawInfo = {
    delegatorAddress: "",
    withdrawAddress: ""
};
exports.DelegatorWithdrawInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.withdrawAddress !== "") {
            writer.uint32(18).string(message.withdrawAddress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseDelegatorWithdrawInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.delegatorAddress = reader.string();
                    break;
                case 2:
                    message.withdrawAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseDelegatorWithdrawInfo);
        if (object.delegatorAddress !== undefined &&
            object.delegatorAddress !== null) {
            message.delegatorAddress = String(object.delegatorAddress);
        }
        else {
            message.delegatorAddress = "";
        }
        if (object.withdrawAddress !== undefined &&
            object.withdrawAddress !== null) {
            message.withdrawAddress = String(object.withdrawAddress);
        }
        else {
            message.withdrawAddress = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDelegatorWithdrawInfo);
        if (object.delegatorAddress !== undefined &&
            object.delegatorAddress !== null) {
            message.delegatorAddress = object.delegatorAddress;
        }
        else {
            message.delegatorAddress = "";
        }
        if (object.withdrawAddress !== undefined &&
            object.withdrawAddress !== null) {
            message.withdrawAddress = object.withdrawAddress;
        }
        else {
            message.withdrawAddress = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.delegatorAddress !== undefined &&
            (obj.delegatorAddress = message.delegatorAddress);
        message.withdrawAddress !== undefined &&
            (obj.withdrawAddress = message.withdrawAddress);
        return obj;
    }
};
var baseValidatorOutstandingRewardsRecord = { validatorAddress: "" };
exports.ValidatorOutstandingRewardsRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        for (var _i = 0, _a = message.outstandingRewards; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.DecCoin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseValidatorOutstandingRewardsRecord);
        message.outstandingRewards = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.outstandingRewards.push(coin_1.DecCoin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseValidatorOutstandingRewardsRecord);
        message.outstandingRewards = [];
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.outstandingRewards !== undefined &&
            object.outstandingRewards !== null) {
            for (var _i = 0, _a = object.outstandingRewards; _i < _a.length; _i++) {
                var e = _a[_i];
                message.outstandingRewards.push(coin_1.DecCoin.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseValidatorOutstandingRewardsRecord);
        message.outstandingRewards = [];
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.outstandingRewards !== undefined &&
            object.outstandingRewards !== null) {
            for (var _i = 0, _a = object.outstandingRewards; _i < _a.length; _i++) {
                var e = _a[_i];
                message.outstandingRewards.push(coin_1.DecCoin.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        if (message.outstandingRewards) {
            obj.outstandingRewards = message.outstandingRewards.map(function (e) {
                return e ? coin_1.DecCoin.toJSON(e) : undefined;
            });
        }
        else {
            obj.outstandingRewards = [];
        }
        return obj;
    }
};
var baseValidatorAccumulatedCommissionRecord = {
    validatorAddress: ""
};
exports.ValidatorAccumulatedCommissionRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (message.accumulated !== undefined) {
            distribution_1.ValidatorAccumulatedCommission.encode(message.accumulated, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseValidatorAccumulatedCommissionRecord);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.accumulated = distribution_1.ValidatorAccumulatedCommission.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseValidatorAccumulatedCommissionRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.accumulated !== undefined && object.accumulated !== null) {
            message.accumulated = distribution_1.ValidatorAccumulatedCommission.fromJSON(object.accumulated);
        }
        else {
            message.accumulated = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseValidatorAccumulatedCommissionRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.accumulated !== undefined && object.accumulated !== null) {
            message.accumulated = distribution_1.ValidatorAccumulatedCommission.fromPartial(object.accumulated);
        }
        else {
            message.accumulated = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        message.accumulated !== undefined &&
            (obj.accumulated = message.accumulated
                ? distribution_1.ValidatorAccumulatedCommission.toJSON(message.accumulated)
                : undefined);
        return obj;
    }
};
var baseValidatorHistoricalRewardsRecord = {
    validatorAddress: "",
    period: Long.UZERO
};
exports.ValidatorHistoricalRewardsRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (!message.period.isZero()) {
            writer.uint32(16).uint64(message.period);
        }
        if (message.rewards !== undefined) {
            distribution_1.ValidatorHistoricalRewards.encode(message.rewards, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseValidatorHistoricalRewardsRecord);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.period = reader.uint64();
                    break;
                case 3:
                    message.rewards = distribution_1.ValidatorHistoricalRewards.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseValidatorHistoricalRewardsRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.period !== undefined && object.period !== null) {
            message.period = Long.fromString(object.period);
        }
        else {
            message.period = Long.UZERO;
        }
        if (object.rewards !== undefined && object.rewards !== null) {
            message.rewards = distribution_1.ValidatorHistoricalRewards.fromJSON(object.rewards);
        }
        else {
            message.rewards = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseValidatorHistoricalRewardsRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.period !== undefined && object.period !== null) {
            message.period = object.period;
        }
        else {
            message.period = Long.UZERO;
        }
        if (object.rewards !== undefined && object.rewards !== null) {
            message.rewards = distribution_1.ValidatorHistoricalRewards.fromPartial(object.rewards);
        }
        else {
            message.rewards = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        message.period !== undefined &&
            (obj.period = (message.period || Long.UZERO).toString());
        message.rewards !== undefined &&
            (obj.rewards = message.rewards
                ? distribution_1.ValidatorHistoricalRewards.toJSON(message.rewards)
                : undefined);
        return obj;
    }
};
var baseValidatorCurrentRewardsRecord = { validatorAddress: "" };
exports.ValidatorCurrentRewardsRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (message.rewards !== undefined) {
            distribution_1.ValidatorCurrentRewards.encode(message.rewards, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseValidatorCurrentRewardsRecord);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.rewards = distribution_1.ValidatorCurrentRewards.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseValidatorCurrentRewardsRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.rewards !== undefined && object.rewards !== null) {
            message.rewards = distribution_1.ValidatorCurrentRewards.fromJSON(object.rewards);
        }
        else {
            message.rewards = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseValidatorCurrentRewardsRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.rewards !== undefined && object.rewards !== null) {
            message.rewards = distribution_1.ValidatorCurrentRewards.fromPartial(object.rewards);
        }
        else {
            message.rewards = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        message.rewards !== undefined &&
            (obj.rewards = message.rewards
                ? distribution_1.ValidatorCurrentRewards.toJSON(message.rewards)
                : undefined);
        return obj;
    }
};
var baseDelegatorStartingInfoRecord = {
    delegatorAddress: "",
    validatorAddress: ""
};
exports.DelegatorStartingInfoRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.validatorAddress !== "") {
            writer.uint32(18).string(message.validatorAddress);
        }
        if (message.startingInfo !== undefined) {
            distribution_1.DelegatorStartingInfo.encode(message.startingInfo, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseDelegatorStartingInfoRecord);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.delegatorAddress = reader.string();
                    break;
                case 2:
                    message.validatorAddress = reader.string();
                    break;
                case 3:
                    message.startingInfo = distribution_1.DelegatorStartingInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseDelegatorStartingInfoRecord);
        if (object.delegatorAddress !== undefined &&
            object.delegatorAddress !== null) {
            message.delegatorAddress = String(object.delegatorAddress);
        }
        else {
            message.delegatorAddress = "";
        }
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.startingInfo !== undefined && object.startingInfo !== null) {
            message.startingInfo = distribution_1.DelegatorStartingInfo.fromJSON(object.startingInfo);
        }
        else {
            message.startingInfo = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDelegatorStartingInfoRecord);
        if (object.delegatorAddress !== undefined &&
            object.delegatorAddress !== null) {
            message.delegatorAddress = object.delegatorAddress;
        }
        else {
            message.delegatorAddress = "";
        }
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.startingInfo !== undefined && object.startingInfo !== null) {
            message.startingInfo = distribution_1.DelegatorStartingInfo.fromPartial(object.startingInfo);
        }
        else {
            message.startingInfo = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.delegatorAddress !== undefined &&
            (obj.delegatorAddress = message.delegatorAddress);
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        message.startingInfo !== undefined &&
            (obj.startingInfo = message.startingInfo
                ? distribution_1.DelegatorStartingInfo.toJSON(message.startingInfo)
                : undefined);
        return obj;
    }
};
var baseValidatorSlashEventRecord = {
    validatorAddress: "",
    height: Long.UZERO,
    period: Long.UZERO
};
exports.ValidatorSlashEventRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (!message.height.isZero()) {
            writer.uint32(16).uint64(message.height);
        }
        if (!message.period.isZero()) {
            writer.uint32(24).uint64(message.period);
        }
        if (message.validatorSlashEvent !== undefined) {
            distribution_1.ValidatorSlashEvent.encode(message.validatorSlashEvent, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseValidatorSlashEventRecord);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.height = reader.uint64();
                    break;
                case 3:
                    message.period = reader.uint64();
                    break;
                case 4:
                    message.validatorSlashEvent = distribution_1.ValidatorSlashEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseValidatorSlashEventRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.height !== undefined && object.height !== null) {
            message.height = Long.fromString(object.height);
        }
        else {
            message.height = Long.UZERO;
        }
        if (object.period !== undefined && object.period !== null) {
            message.period = Long.fromString(object.period);
        }
        else {
            message.period = Long.UZERO;
        }
        if (object.validatorSlashEvent !== undefined &&
            object.validatorSlashEvent !== null) {
            message.validatorSlashEvent = distribution_1.ValidatorSlashEvent.fromJSON(object.validatorSlashEvent);
        }
        else {
            message.validatorSlashEvent = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseValidatorSlashEventRecord);
        if (object.validatorAddress !== undefined &&
            object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.height !== undefined && object.height !== null) {
            message.height = object.height;
        }
        else {
            message.height = Long.UZERO;
        }
        if (object.period !== undefined && object.period !== null) {
            message.period = object.period;
        }
        else {
            message.period = Long.UZERO;
        }
        if (object.validatorSlashEvent !== undefined &&
            object.validatorSlashEvent !== null) {
            message.validatorSlashEvent = distribution_1.ValidatorSlashEvent.fromPartial(object.validatorSlashEvent);
        }
        else {
            message.validatorSlashEvent = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        message.height !== undefined &&
            (obj.height = (message.height || Long.UZERO).toString());
        message.period !== undefined &&
            (obj.period = (message.period || Long.UZERO).toString());
        message.validatorSlashEvent !== undefined &&
            (obj.validatorSlashEvent = message.validatorSlashEvent
                ? distribution_1.ValidatorSlashEvent.toJSON(message.validatorSlashEvent)
                : undefined);
        return obj;
    }
};
var baseGenesisState = { previousProposer: "" };
exports.GenesisState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.params !== undefined) {
            distribution_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.feePool !== undefined) {
            distribution_1.FeePool.encode(message.feePool, writer.uint32(18).fork()).ldelim();
        }
        for (var _i = 0, _a = message.delegatorWithdrawInfos; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.DelegatorWithdrawInfo.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.previousProposer !== "") {
            writer.uint32(34).string(message.previousProposer);
        }
        for (var _b = 0, _c = message.outstandingRewards; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.ValidatorOutstandingRewardsRecord.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (var _d = 0, _e = message.validatorAccumulatedCommissions; _d < _e.length; _d++) {
            var v = _e[_d];
            exports.ValidatorAccumulatedCommissionRecord.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (var _f = 0, _g = message.validatorHistoricalRewards; _f < _g.length; _f++) {
            var v = _g[_f];
            exports.ValidatorHistoricalRewardsRecord.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (var _h = 0, _j = message.validatorCurrentRewards; _h < _j.length; _h++) {
            var v = _j[_h];
            exports.ValidatorCurrentRewardsRecord.encode(v, writer.uint32(66).fork()).ldelim();
        }
        for (var _k = 0, _l = message.delegatorStartingInfos; _k < _l.length; _k++) {
            var v = _l[_k];
            exports.DelegatorStartingInfoRecord.encode(v, writer.uint32(74).fork()).ldelim();
        }
        for (var _m = 0, _o = message.validatorSlashEvents; _m < _o.length; _m++) {
            var v = _o[_m];
            exports.ValidatorSlashEventRecord.encode(v, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGenesisState);
        message.delegatorWithdrawInfos = [];
        message.outstandingRewards = [];
        message.validatorAccumulatedCommissions = [];
        message.validatorHistoricalRewards = [];
        message.validatorCurrentRewards = [];
        message.delegatorStartingInfos = [];
        message.validatorSlashEvents = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = distribution_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.feePool = distribution_1.FeePool.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.delegatorWithdrawInfos.push(exports.DelegatorWithdrawInfo.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.previousProposer = reader.string();
                    break;
                case 5:
                    message.outstandingRewards.push(exports.ValidatorOutstandingRewardsRecord.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.validatorAccumulatedCommissions.push(exports.ValidatorAccumulatedCommissionRecord.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.validatorHistoricalRewards.push(exports.ValidatorHistoricalRewardsRecord.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.validatorCurrentRewards.push(exports.ValidatorCurrentRewardsRecord.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.delegatorStartingInfos.push(exports.DelegatorStartingInfoRecord.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.validatorSlashEvents.push(exports.ValidatorSlashEventRecord.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGenesisState);
        message.delegatorWithdrawInfos = [];
        message.outstandingRewards = [];
        message.validatorAccumulatedCommissions = [];
        message.validatorHistoricalRewards = [];
        message.validatorCurrentRewards = [];
        message.delegatorStartingInfos = [];
        message.validatorSlashEvents = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = distribution_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.feePool !== undefined && object.feePool !== null) {
            message.feePool = distribution_1.FeePool.fromJSON(object.feePool);
        }
        else {
            message.feePool = undefined;
        }
        if (object.delegatorWithdrawInfos !== undefined &&
            object.delegatorWithdrawInfos !== null) {
            for (var _i = 0, _a = object.delegatorWithdrawInfos; _i < _a.length; _i++) {
                var e = _a[_i];
                message.delegatorWithdrawInfos.push(exports.DelegatorWithdrawInfo.fromJSON(e));
            }
        }
        if (object.previousProposer !== undefined &&
            object.previousProposer !== null) {
            message.previousProposer = String(object.previousProposer);
        }
        else {
            message.previousProposer = "";
        }
        if (object.outstandingRewards !== undefined &&
            object.outstandingRewards !== null) {
            for (var _b = 0, _c = object.outstandingRewards; _b < _c.length; _b++) {
                var e = _c[_b];
                message.outstandingRewards.push(exports.ValidatorOutstandingRewardsRecord.fromJSON(e));
            }
        }
        if (object.validatorAccumulatedCommissions !== undefined &&
            object.validatorAccumulatedCommissions !== null) {
            for (var _d = 0, _e = object.validatorAccumulatedCommissions; _d < _e.length; _d++) {
                var e = _e[_d];
                message.validatorAccumulatedCommissions.push(exports.ValidatorAccumulatedCommissionRecord.fromJSON(e));
            }
        }
        if (object.validatorHistoricalRewards !== undefined &&
            object.validatorHistoricalRewards !== null) {
            for (var _f = 0, _g = object.validatorHistoricalRewards; _f < _g.length; _f++) {
                var e = _g[_f];
                message.validatorHistoricalRewards.push(exports.ValidatorHistoricalRewardsRecord.fromJSON(e));
            }
        }
        if (object.validatorCurrentRewards !== undefined &&
            object.validatorCurrentRewards !== null) {
            for (var _h = 0, _j = object.validatorCurrentRewards; _h < _j.length; _h++) {
                var e = _j[_h];
                message.validatorCurrentRewards.push(exports.ValidatorCurrentRewardsRecord.fromJSON(e));
            }
        }
        if (object.delegatorStartingInfos !== undefined &&
            object.delegatorStartingInfos !== null) {
            for (var _k = 0, _l = object.delegatorStartingInfos; _k < _l.length; _k++) {
                var e = _l[_k];
                message.delegatorStartingInfos.push(exports.DelegatorStartingInfoRecord.fromJSON(e));
            }
        }
        if (object.validatorSlashEvents !== undefined &&
            object.validatorSlashEvents !== null) {
            for (var _m = 0, _o = object.validatorSlashEvents; _m < _o.length; _m++) {
                var e = _o[_m];
                message.validatorSlashEvents.push(exports.ValidatorSlashEventRecord.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGenesisState);
        message.delegatorWithdrawInfos = [];
        message.outstandingRewards = [];
        message.validatorAccumulatedCommissions = [];
        message.validatorHistoricalRewards = [];
        message.validatorCurrentRewards = [];
        message.delegatorStartingInfos = [];
        message.validatorSlashEvents = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = distribution_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.feePool !== undefined && object.feePool !== null) {
            message.feePool = distribution_1.FeePool.fromPartial(object.feePool);
        }
        else {
            message.feePool = undefined;
        }
        if (object.delegatorWithdrawInfos !== undefined &&
            object.delegatorWithdrawInfos !== null) {
            for (var _i = 0, _a = object.delegatorWithdrawInfos; _i < _a.length; _i++) {
                var e = _a[_i];
                message.delegatorWithdrawInfos.push(exports.DelegatorWithdrawInfo.fromPartial(e));
            }
        }
        if (object.previousProposer !== undefined &&
            object.previousProposer !== null) {
            message.previousProposer = object.previousProposer;
        }
        else {
            message.previousProposer = "";
        }
        if (object.outstandingRewards !== undefined &&
            object.outstandingRewards !== null) {
            for (var _b = 0, _c = object.outstandingRewards; _b < _c.length; _b++) {
                var e = _c[_b];
                message.outstandingRewards.push(exports.ValidatorOutstandingRewardsRecord.fromPartial(e));
            }
        }
        if (object.validatorAccumulatedCommissions !== undefined &&
            object.validatorAccumulatedCommissions !== null) {
            for (var _d = 0, _e = object.validatorAccumulatedCommissions; _d < _e.length; _d++) {
                var e = _e[_d];
                message.validatorAccumulatedCommissions.push(exports.ValidatorAccumulatedCommissionRecord.fromPartial(e));
            }
        }
        if (object.validatorHistoricalRewards !== undefined &&
            object.validatorHistoricalRewards !== null) {
            for (var _f = 0, _g = object.validatorHistoricalRewards; _f < _g.length; _f++) {
                var e = _g[_f];
                message.validatorHistoricalRewards.push(exports.ValidatorHistoricalRewardsRecord.fromPartial(e));
            }
        }
        if (object.validatorCurrentRewards !== undefined &&
            object.validatorCurrentRewards !== null) {
            for (var _h = 0, _j = object.validatorCurrentRewards; _h < _j.length; _h++) {
                var e = _j[_h];
                message.validatorCurrentRewards.push(exports.ValidatorCurrentRewardsRecord.fromPartial(e));
            }
        }
        if (object.delegatorStartingInfos !== undefined &&
            object.delegatorStartingInfos !== null) {
            for (var _k = 0, _l = object.delegatorStartingInfos; _k < _l.length; _k++) {
                var e = _l[_k];
                message.delegatorStartingInfos.push(exports.DelegatorStartingInfoRecord.fromPartial(e));
            }
        }
        if (object.validatorSlashEvents !== undefined &&
            object.validatorSlashEvents !== null) {
            for (var _m = 0, _o = object.validatorSlashEvents; _m < _o.length; _m++) {
                var e = _o[_m];
                message.validatorSlashEvents.push(exports.ValidatorSlashEventRecord.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? distribution_1.Params.toJSON(message.params) : undefined);
        message.feePool !== undefined &&
            (obj.feePool = message.feePool
                ? distribution_1.FeePool.toJSON(message.feePool)
                : undefined);
        if (message.delegatorWithdrawInfos) {
            obj.delegatorWithdrawInfos = message.delegatorWithdrawInfos.map(function (e) {
                return e ? exports.DelegatorWithdrawInfo.toJSON(e) : undefined;
            });
        }
        else {
            obj.delegatorWithdrawInfos = [];
        }
        message.previousProposer !== undefined &&
            (obj.previousProposer = message.previousProposer);
        if (message.outstandingRewards) {
            obj.outstandingRewards = message.outstandingRewards.map(function (e) {
                return e ? exports.ValidatorOutstandingRewardsRecord.toJSON(e) : undefined;
            });
        }
        else {
            obj.outstandingRewards = [];
        }
        if (message.validatorAccumulatedCommissions) {
            obj.validatorAccumulatedCommissions = message.validatorAccumulatedCommissions.map(function (e) { return (e ? exports.ValidatorAccumulatedCommissionRecord.toJSON(e) : undefined); });
        }
        else {
            obj.validatorAccumulatedCommissions = [];
        }
        if (message.validatorHistoricalRewards) {
            obj.validatorHistoricalRewards = message.validatorHistoricalRewards.map(function (e) { return (e ? exports.ValidatorHistoricalRewardsRecord.toJSON(e) : undefined); });
        }
        else {
            obj.validatorHistoricalRewards = [];
        }
        if (message.validatorCurrentRewards) {
            obj.validatorCurrentRewards = message.validatorCurrentRewards.map(function (e) {
                return e ? exports.ValidatorCurrentRewardsRecord.toJSON(e) : undefined;
            });
        }
        else {
            obj.validatorCurrentRewards = [];
        }
        if (message.delegatorStartingInfos) {
            obj.delegatorStartingInfos = message.delegatorStartingInfos.map(function (e) {
                return e ? exports.DelegatorStartingInfoRecord.toJSON(e) : undefined;
            });
        }
        else {
            obj.delegatorStartingInfos = [];
        }
        if (message.validatorSlashEvents) {
            obj.validatorSlashEvents = message.validatorSlashEvents.map(function (e) {
                return e ? exports.ValidatorSlashEventRecord.toJSON(e) : undefined;
            });
        }
        else {
            obj.validatorSlashEvents = [];
        }
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
