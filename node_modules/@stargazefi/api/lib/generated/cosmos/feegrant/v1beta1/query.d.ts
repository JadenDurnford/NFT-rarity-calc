import { FeeAllowanceGrant } from "../../../cosmos/feegrant/v1beta1/feegrant";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Reader, Writer } from "protobufjs/minimal";
import * as Long from "long";
export declare const protobufPackage = "cosmos.feegrant.v1beta1";
/** QueryFeeAllowanceRequest is the request type for the Query/FeeAllowance RPC method. */
export interface QueryFeeAllowanceRequest {
    granter: string;
    grantee: string;
}
/** QueryFeeAllowanceResponse is the response type for the Query/FeeAllowance RPC method. */
export interface QueryFeeAllowanceResponse {
    /** fee_allowance is a fee_allowance granted for grantee by granter. */
    feeAllowance?: FeeAllowanceGrant;
}
/** QueryFeeAllowancesRequest is the request type for the Query/FeeAllowances RPC method. */
export interface QueryFeeAllowancesRequest {
    grantee: string;
    /** pagination defines an pagination for the request. */
    pagination?: PageRequest;
}
/** QueryFeeAllowancesResponse is the response type for the Query/FeeAllowances RPC method. */
export interface QueryFeeAllowancesResponse {
    /** fee_allowances are fee_allowance's granted for grantee by granter. */
    feeAllowances: FeeAllowanceGrant[];
    /** pagination defines an pagination for the response. */
    pagination?: PageResponse;
}
export declare const QueryFeeAllowanceRequest: {
    encode(message: QueryFeeAllowanceRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryFeeAllowanceRequest;
    fromJSON(object: any): QueryFeeAllowanceRequest;
    fromPartial(object: DeepPartial<QueryFeeAllowanceRequest>): QueryFeeAllowanceRequest;
    toJSON(message: QueryFeeAllowanceRequest): unknown;
};
export declare const QueryFeeAllowanceResponse: {
    encode(message: QueryFeeAllowanceResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryFeeAllowanceResponse;
    fromJSON(object: any): QueryFeeAllowanceResponse;
    fromPartial(object: DeepPartial<QueryFeeAllowanceResponse>): QueryFeeAllowanceResponse;
    toJSON(message: QueryFeeAllowanceResponse): unknown;
};
export declare const QueryFeeAllowancesRequest: {
    encode(message: QueryFeeAllowancesRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryFeeAllowancesRequest;
    fromJSON(object: any): QueryFeeAllowancesRequest;
    fromPartial(object: DeepPartial<QueryFeeAllowancesRequest>): QueryFeeAllowancesRequest;
    toJSON(message: QueryFeeAllowancesRequest): unknown;
};
export declare const QueryFeeAllowancesResponse: {
    encode(message: QueryFeeAllowancesResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): QueryFeeAllowancesResponse;
    fromJSON(object: any): QueryFeeAllowancesResponse;
    fromPartial(object: DeepPartial<QueryFeeAllowancesResponse>): QueryFeeAllowancesResponse;
    toJSON(message: QueryFeeAllowancesResponse): unknown;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** FeeAllowance returns fee granted to the grantee by the granter. */
    FeeAllowance(request: QueryFeeAllowanceRequest): Promise<QueryFeeAllowanceResponse>;
    /** FeeAllowances returns all the grants for address. */
    FeeAllowances(request: QueryFeeAllowancesRequest): Promise<QueryFeeAllowancesResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    FeeAllowance(request: QueryFeeAllowanceRequest): Promise<QueryFeeAllowanceResponse>;
    FeeAllowances(request: QueryFeeAllowancesRequest): Promise<QueryFeeAllowancesResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
