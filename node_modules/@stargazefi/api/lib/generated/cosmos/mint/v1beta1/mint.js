"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Params = exports.Minter = exports.protobufPackage = void 0;
/* eslint-disable */
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.mint.v1beta1";
var baseMinter = { inflation: "", annualProvisions: "" };
exports.Minter = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.inflation !== "") {
            writer.uint32(10).string(message.inflation);
        }
        if (message.annualProvisions !== "") {
            writer.uint32(18).string(message.annualProvisions);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseMinter);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inflation = reader.string();
                    break;
                case 2:
                    message.annualProvisions = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseMinter);
        if (object.inflation !== undefined && object.inflation !== null) {
            message.inflation = String(object.inflation);
        }
        else {
            message.inflation = "";
        }
        if (object.annualProvisions !== undefined &&
            object.annualProvisions !== null) {
            message.annualProvisions = String(object.annualProvisions);
        }
        else {
            message.annualProvisions = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMinter);
        if (object.inflation !== undefined && object.inflation !== null) {
            message.inflation = object.inflation;
        }
        else {
            message.inflation = "";
        }
        if (object.annualProvisions !== undefined &&
            object.annualProvisions !== null) {
            message.annualProvisions = object.annualProvisions;
        }
        else {
            message.annualProvisions = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.inflation !== undefined && (obj.inflation = message.inflation);
        message.annualProvisions !== undefined &&
            (obj.annualProvisions = message.annualProvisions);
        return obj;
    }
};
var baseParams = {
    mintDenom: "",
    inflationRateChange: "",
    inflationMax: "",
    inflationMin: "",
    goalBonded: "",
    blocksPerYear: Long.UZERO
};
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.mintDenom !== "") {
            writer.uint32(10).string(message.mintDenom);
        }
        if (message.inflationRateChange !== "") {
            writer.uint32(18).string(message.inflationRateChange);
        }
        if (message.inflationMax !== "") {
            writer.uint32(26).string(message.inflationMax);
        }
        if (message.inflationMin !== "") {
            writer.uint32(34).string(message.inflationMin);
        }
        if (message.goalBonded !== "") {
            writer.uint32(42).string(message.goalBonded);
        }
        if (!message.blocksPerYear.isZero()) {
            writer.uint32(48).uint64(message.blocksPerYear);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseParams);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mintDenom = reader.string();
                    break;
                case 2:
                    message.inflationRateChange = reader.string();
                    break;
                case 3:
                    message.inflationMax = reader.string();
                    break;
                case 4:
                    message.inflationMin = reader.string();
                    break;
                case 5:
                    message.goalBonded = reader.string();
                    break;
                case 6:
                    message.blocksPerYear = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseParams);
        if (object.mintDenom !== undefined && object.mintDenom !== null) {
            message.mintDenom = String(object.mintDenom);
        }
        else {
            message.mintDenom = "";
        }
        if (object.inflationRateChange !== undefined &&
            object.inflationRateChange !== null) {
            message.inflationRateChange = String(object.inflationRateChange);
        }
        else {
            message.inflationRateChange = "";
        }
        if (object.inflationMax !== undefined && object.inflationMax !== null) {
            message.inflationMax = String(object.inflationMax);
        }
        else {
            message.inflationMax = "";
        }
        if (object.inflationMin !== undefined && object.inflationMin !== null) {
            message.inflationMin = String(object.inflationMin);
        }
        else {
            message.inflationMin = "";
        }
        if (object.goalBonded !== undefined && object.goalBonded !== null) {
            message.goalBonded = String(object.goalBonded);
        }
        else {
            message.goalBonded = "";
        }
        if (object.blocksPerYear !== undefined && object.blocksPerYear !== null) {
            message.blocksPerYear = Long.fromString(object.blocksPerYear);
        }
        else {
            message.blocksPerYear = Long.UZERO;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseParams);
        if (object.mintDenom !== undefined && object.mintDenom !== null) {
            message.mintDenom = object.mintDenom;
        }
        else {
            message.mintDenom = "";
        }
        if (object.inflationRateChange !== undefined &&
            object.inflationRateChange !== null) {
            message.inflationRateChange = object.inflationRateChange;
        }
        else {
            message.inflationRateChange = "";
        }
        if (object.inflationMax !== undefined && object.inflationMax !== null) {
            message.inflationMax = object.inflationMax;
        }
        else {
            message.inflationMax = "";
        }
        if (object.inflationMin !== undefined && object.inflationMin !== null) {
            message.inflationMin = object.inflationMin;
        }
        else {
            message.inflationMin = "";
        }
        if (object.goalBonded !== undefined && object.goalBonded !== null) {
            message.goalBonded = object.goalBonded;
        }
        else {
            message.goalBonded = "";
        }
        if (object.blocksPerYear !== undefined && object.blocksPerYear !== null) {
            message.blocksPerYear = object.blocksPerYear;
        }
        else {
            message.blocksPerYear = Long.UZERO;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mintDenom !== undefined && (obj.mintDenom = message.mintDenom);
        message.inflationRateChange !== undefined &&
            (obj.inflationRateChange = message.inflationRateChange);
        message.inflationMax !== undefined &&
            (obj.inflationMax = message.inflationMax);
        message.inflationMin !== undefined &&
            (obj.inflationMin = message.inflationMin);
        message.goalBonded !== undefined && (obj.goalBonded = message.goalBonded);
        message.blocksPerYear !== undefined &&
            (obj.blocksPerYear = (message.blocksPerYear || Long.UZERO).toString());
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
