"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.MissedBlock = exports.ValidatorMissedBlocks = exports.SigningInfo = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var slashing_1 = require("../../../cosmos/slashing/v1beta1/slashing");
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.slashing.v1beta1";
var baseGenesisState = {};
exports.GenesisState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.params !== undefined) {
            slashing_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (var _i = 0, _a = message.signingInfos; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.SigningInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (var _b = 0, _c = message.missedBlocks; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.ValidatorMissedBlocks.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGenesisState);
        message.signingInfos = [];
        message.missedBlocks = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = slashing_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.signingInfos.push(exports.SigningInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.missedBlocks.push(exports.ValidatorMissedBlocks.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGenesisState);
        message.signingInfos = [];
        message.missedBlocks = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = slashing_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.signingInfos !== undefined && object.signingInfos !== null) {
            for (var _i = 0, _a = object.signingInfos; _i < _a.length; _i++) {
                var e = _a[_i];
                message.signingInfos.push(exports.SigningInfo.fromJSON(e));
            }
        }
        if (object.missedBlocks !== undefined && object.missedBlocks !== null) {
            for (var _b = 0, _c = object.missedBlocks; _b < _c.length; _b++) {
                var e = _c[_b];
                message.missedBlocks.push(exports.ValidatorMissedBlocks.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGenesisState);
        message.signingInfos = [];
        message.missedBlocks = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = slashing_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.signingInfos !== undefined && object.signingInfos !== null) {
            for (var _i = 0, _a = object.signingInfos; _i < _a.length; _i++) {
                var e = _a[_i];
                message.signingInfos.push(exports.SigningInfo.fromPartial(e));
            }
        }
        if (object.missedBlocks !== undefined && object.missedBlocks !== null) {
            for (var _b = 0, _c = object.missedBlocks; _b < _c.length; _b++) {
                var e = _c[_b];
                message.missedBlocks.push(exports.ValidatorMissedBlocks.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? slashing_1.Params.toJSON(message.params) : undefined);
        if (message.signingInfos) {
            obj.signingInfos = message.signingInfos.map(function (e) {
                return e ? exports.SigningInfo.toJSON(e) : undefined;
            });
        }
        else {
            obj.signingInfos = [];
        }
        if (message.missedBlocks) {
            obj.missedBlocks = message.missedBlocks.map(function (e) {
                return e ? exports.ValidatorMissedBlocks.toJSON(e) : undefined;
            });
        }
        else {
            obj.missedBlocks = [];
        }
        return obj;
    }
};
var baseSigningInfo = { address: "" };
exports.SigningInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.validatorSigningInfo !== undefined) {
            slashing_1.ValidatorSigningInfo.encode(message.validatorSigningInfo, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseSigningInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.validatorSigningInfo = slashing_1.ValidatorSigningInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseSigningInfo);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.validatorSigningInfo !== undefined &&
            object.validatorSigningInfo !== null) {
            message.validatorSigningInfo = slashing_1.ValidatorSigningInfo.fromJSON(object.validatorSigningInfo);
        }
        else {
            message.validatorSigningInfo = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSigningInfo);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.validatorSigningInfo !== undefined &&
            object.validatorSigningInfo !== null) {
            message.validatorSigningInfo = slashing_1.ValidatorSigningInfo.fromPartial(object.validatorSigningInfo);
        }
        else {
            message.validatorSigningInfo = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.validatorSigningInfo !== undefined &&
            (obj.validatorSigningInfo = message.validatorSigningInfo
                ? slashing_1.ValidatorSigningInfo.toJSON(message.validatorSigningInfo)
                : undefined);
        return obj;
    }
};
var baseValidatorMissedBlocks = { address: "" };
exports.ValidatorMissedBlocks = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (var _i = 0, _a = message.missedBlocks; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.MissedBlock.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseValidatorMissedBlocks);
        message.missedBlocks = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.missedBlocks.push(exports.MissedBlock.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseValidatorMissedBlocks);
        message.missedBlocks = [];
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.missedBlocks !== undefined && object.missedBlocks !== null) {
            for (var _i = 0, _a = object.missedBlocks; _i < _a.length; _i++) {
                var e = _a[_i];
                message.missedBlocks.push(exports.MissedBlock.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseValidatorMissedBlocks);
        message.missedBlocks = [];
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.missedBlocks !== undefined && object.missedBlocks !== null) {
            for (var _i = 0, _a = object.missedBlocks; _i < _a.length; _i++) {
                var e = _a[_i];
                message.missedBlocks.push(exports.MissedBlock.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        if (message.missedBlocks) {
            obj.missedBlocks = message.missedBlocks.map(function (e) {
                return e ? exports.MissedBlock.toJSON(e) : undefined;
            });
        }
        else {
            obj.missedBlocks = [];
        }
        return obj;
    }
};
var baseMissedBlock = { index: Long.ZERO, missed: false };
exports.MissedBlock = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.index.isZero()) {
            writer.uint32(8).int64(message.index);
        }
        if (message.missed === true) {
            writer.uint32(16).bool(message.missed);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseMissedBlock);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.index = reader.int64();
                    break;
                case 2:
                    message.missed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseMissedBlock);
        if (object.index !== undefined && object.index !== null) {
            message.index = Long.fromString(object.index);
        }
        else {
            message.index = Long.ZERO;
        }
        if (object.missed !== undefined && object.missed !== null) {
            message.missed = Boolean(object.missed);
        }
        else {
            message.missed = false;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMissedBlock);
        if (object.index !== undefined && object.index !== null) {
            message.index = object.index;
        }
        else {
            message.index = Long.ZERO;
        }
        if (object.missed !== undefined && object.missed !== null) {
            message.missed = object.missed;
        }
        else {
            message.missed = false;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.index !== undefined &&
            (obj.index = (message.index || Long.ZERO).toString());
        message.missed !== undefined && (obj.missed = message.missed);
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
