"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.LastValidatorPower = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var staking_1 = require("../../../cosmos/staking/v1beta1/staking");
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "cosmos.staking.v1beta1";
var baseGenesisState = { exported: false };
exports.GenesisState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.params !== undefined) {
            staking_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.lastTotalPower.length !== 0) {
            writer.uint32(18).bytes(message.lastTotalPower);
        }
        for (var _i = 0, _a = message.lastValidatorPowers; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.LastValidatorPower.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (var _b = 0, _c = message.validators; _b < _c.length; _b++) {
            var v = _c[_b];
            staking_1.Validator.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (var _d = 0, _e = message.delegations; _d < _e.length; _d++) {
            var v = _e[_d];
            staking_1.Delegation.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (var _f = 0, _g = message.unbondingDelegations; _f < _g.length; _f++) {
            var v = _g[_f];
            staking_1.UnbondingDelegation.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (var _h = 0, _j = message.redelegations; _h < _j.length; _h++) {
            var v = _j[_h];
            staking_1.Redelegation.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.exported === true) {
            writer.uint32(64).bool(message.exported);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseGenesisState);
        message.lastValidatorPowers = [];
        message.validators = [];
        message.delegations = [];
        message.unbondingDelegations = [];
        message.redelegations = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = staking_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lastTotalPower = reader.bytes();
                    break;
                case 3:
                    message.lastValidatorPowers.push(exports.LastValidatorPower.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.delegations.push(staking_1.Delegation.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.unbondingDelegations.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.redelegations.push(staking_1.Redelegation.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.exported = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseGenesisState);
        message.lastValidatorPowers = [];
        message.validators = [];
        message.delegations = [];
        message.unbondingDelegations = [];
        message.redelegations = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = staking_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.lastTotalPower !== undefined && object.lastTotalPower !== null) {
            message.lastTotalPower = bytesFromBase64(object.lastTotalPower);
        }
        if (object.lastValidatorPowers !== undefined &&
            object.lastValidatorPowers !== null) {
            for (var _i = 0, _a = object.lastValidatorPowers; _i < _a.length; _i++) {
                var e = _a[_i];
                message.lastValidatorPowers.push(exports.LastValidatorPower.fromJSON(e));
            }
        }
        if (object.validators !== undefined && object.validators !== null) {
            for (var _b = 0, _c = object.validators; _b < _c.length; _b++) {
                var e = _c[_b];
                message.validators.push(staking_1.Validator.fromJSON(e));
            }
        }
        if (object.delegations !== undefined && object.delegations !== null) {
            for (var _d = 0, _e = object.delegations; _d < _e.length; _d++) {
                var e = _e[_d];
                message.delegations.push(staking_1.Delegation.fromJSON(e));
            }
        }
        if (object.unbondingDelegations !== undefined &&
            object.unbondingDelegations !== null) {
            for (var _f = 0, _g = object.unbondingDelegations; _f < _g.length; _f++) {
                var e = _g[_f];
                message.unbondingDelegations.push(staking_1.UnbondingDelegation.fromJSON(e));
            }
        }
        if (object.redelegations !== undefined && object.redelegations !== null) {
            for (var _h = 0, _j = object.redelegations; _h < _j.length; _h++) {
                var e = _j[_h];
                message.redelegations.push(staking_1.Redelegation.fromJSON(e));
            }
        }
        if (object.exported !== undefined && object.exported !== null) {
            message.exported = Boolean(object.exported);
        }
        else {
            message.exported = false;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGenesisState);
        message.lastValidatorPowers = [];
        message.validators = [];
        message.delegations = [];
        message.unbondingDelegations = [];
        message.redelegations = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = staking_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.lastTotalPower !== undefined && object.lastTotalPower !== null) {
            message.lastTotalPower = object.lastTotalPower;
        }
        else {
            message.lastTotalPower = new Uint8Array();
        }
        if (object.lastValidatorPowers !== undefined &&
            object.lastValidatorPowers !== null) {
            for (var _i = 0, _a = object.lastValidatorPowers; _i < _a.length; _i++) {
                var e = _a[_i];
                message.lastValidatorPowers.push(exports.LastValidatorPower.fromPartial(e));
            }
        }
        if (object.validators !== undefined && object.validators !== null) {
            for (var _b = 0, _c = object.validators; _b < _c.length; _b++) {
                var e = _c[_b];
                message.validators.push(staking_1.Validator.fromPartial(e));
            }
        }
        if (object.delegations !== undefined && object.delegations !== null) {
            for (var _d = 0, _e = object.delegations; _d < _e.length; _d++) {
                var e = _e[_d];
                message.delegations.push(staking_1.Delegation.fromPartial(e));
            }
        }
        if (object.unbondingDelegations !== undefined &&
            object.unbondingDelegations !== null) {
            for (var _f = 0, _g = object.unbondingDelegations; _f < _g.length; _f++) {
                var e = _g[_f];
                message.unbondingDelegations.push(staking_1.UnbondingDelegation.fromPartial(e));
            }
        }
        if (object.redelegations !== undefined && object.redelegations !== null) {
            for (var _h = 0, _j = object.redelegations; _h < _j.length; _h++) {
                var e = _j[_h];
                message.redelegations.push(staking_1.Redelegation.fromPartial(e));
            }
        }
        if (object.exported !== undefined && object.exported !== null) {
            message.exported = object.exported;
        }
        else {
            message.exported = false;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? staking_1.Params.toJSON(message.params) : undefined);
        message.lastTotalPower !== undefined &&
            (obj.lastTotalPower = base64FromBytes(message.lastTotalPower !== undefined
                ? message.lastTotalPower
                : new Uint8Array()));
        if (message.lastValidatorPowers) {
            obj.lastValidatorPowers = message.lastValidatorPowers.map(function (e) {
                return e ? exports.LastValidatorPower.toJSON(e) : undefined;
            });
        }
        else {
            obj.lastValidatorPowers = [];
        }
        if (message.validators) {
            obj.validators = message.validators.map(function (e) {
                return e ? staking_1.Validator.toJSON(e) : undefined;
            });
        }
        else {
            obj.validators = [];
        }
        if (message.delegations) {
            obj.delegations = message.delegations.map(function (e) {
                return e ? staking_1.Delegation.toJSON(e) : undefined;
            });
        }
        else {
            obj.delegations = [];
        }
        if (message.unbondingDelegations) {
            obj.unbondingDelegations = message.unbondingDelegations.map(function (e) {
                return e ? staking_1.UnbondingDelegation.toJSON(e) : undefined;
            });
        }
        else {
            obj.unbondingDelegations = [];
        }
        if (message.redelegations) {
            obj.redelegations = message.redelegations.map(function (e) {
                return e ? staking_1.Redelegation.toJSON(e) : undefined;
            });
        }
        else {
            obj.redelegations = [];
        }
        message.exported !== undefined && (obj.exported = message.exported);
        return obj;
    }
};
var baseLastValidatorPower = { address: "", power: Long.ZERO };
exports.LastValidatorPower = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (!message.power.isZero()) {
            writer.uint32(16).int64(message.power);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseLastValidatorPower);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.power = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseLastValidatorPower);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.power !== undefined && object.power !== null) {
            message.power = Long.fromString(object.power);
        }
        else {
            message.power = Long.ZERO;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseLastValidatorPower);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.power !== undefined && object.power !== null) {
            message.power = object.power;
        }
        else {
            message.power = Long.ZERO;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.power !== undefined &&
            (obj.power = (message.power || Long.ZERO).toString());
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, "base64").toString("binary"); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, "binary").toString("base64"); });
function base64FromBytes(arr) {
    var bin = [];
    for (var i = 0; i < arr.byteLength; ++i) {
        bin.push(String.fromCharCode(arr[i]));
    }
    return btoa(bin.join(""));
}
