import { Writer, Reader } from "protobufjs/minimal";
import * as Long from "long";
export declare const protobufPackage = "publicawesome.stargaze.alloc.v1beta1";
export interface WeightedAddress {
    address: string;
    weight: string;
}
export interface DistributionProportions {
    nftIncentives: string;
    developerRewards: string;
}
export interface Params {
    /** distribution_proportions defines the proportion of the minted denom */
    distributionProportions?: DistributionProportions;
    /** address to receive developer rewards */
    weightedDeveloperRewardsReceivers: WeightedAddress[];
}
export declare const WeightedAddress: {
    encode(message: WeightedAddress, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): WeightedAddress;
    fromJSON(object: any): WeightedAddress;
    fromPartial(object: DeepPartial<WeightedAddress>): WeightedAddress;
    toJSON(message: WeightedAddress): unknown;
};
export declare const DistributionProportions: {
    encode(message: DistributionProportions, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): DistributionProportions;
    fromJSON(object: any): DistributionProportions;
    fromPartial(object: DeepPartial<DistributionProportions>): DistributionProportions;
    toJSON(message: DistributionProportions): unknown;
};
export declare const Params: {
    encode(message: Params, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    fromPartial(object: DeepPartial<Params>): Params;
    toJSON(message: Params): unknown;
};
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
