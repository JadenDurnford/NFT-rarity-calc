"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.ClaimRecord = exports.actionToJSON = exports.actionFromJSON = exports.Action = exports.protobufPackage = void 0;
/* eslint-disable */
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "publicawesome.stargaze.claim.v1beta1";
var Action;
(function (Action) {
    Action[Action["ActionInitialClaim"] = 0] = "ActionInitialClaim";
    Action[Action["ActionBuySocialToken"] = 1] = "ActionBuySocialToken";
    Action[Action["ActionMintNFT"] = 2] = "ActionMintNFT";
    Action[Action["ActionVote"] = 3] = "ActionVote";
    Action[Action["ActionDelegateStake"] = 4] = "ActionDelegateStake";
    Action[Action["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Action = exports.Action || (exports.Action = {}));
function actionFromJSON(object) {
    switch (object) {
        case 0:
        case "ActionInitialClaim":
            return Action.ActionInitialClaim;
        case 1:
        case "ActionBuySocialToken":
            return Action.ActionBuySocialToken;
        case 2:
        case "ActionMintNFT":
            return Action.ActionMintNFT;
        case 3:
        case "ActionVote":
            return Action.ActionVote;
        case 4:
        case "ActionDelegateStake":
            return Action.ActionDelegateStake;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Action.UNRECOGNIZED;
    }
}
exports.actionFromJSON = actionFromJSON;
function actionToJSON(object) {
    switch (object) {
        case Action.ActionInitialClaim:
            return "ActionInitialClaim";
        case Action.ActionBuySocialToken:
            return "ActionBuySocialToken";
        case Action.ActionMintNFT:
            return "ActionMintNFT";
        case Action.ActionVote:
            return "ActionVote";
        case Action.ActionDelegateStake:
            return "ActionDelegateStake";
        default:
            return "UNKNOWN";
    }
}
exports.actionToJSON = actionToJSON;
var baseClaimRecord = { address: "", actionCompleted: false };
exports.ClaimRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (var _i = 0, _a = message.initialClaimableAmount; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        writer.uint32(34).fork();
        for (var _b = 0, _c = message.actionCompleted; _b < _c.length; _b++) {
            var v = _c[_b];
            writer.bool(v);
        }
        writer.ldelim();
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseClaimRecord);
        message.initialClaimableAmount = [];
        message.actionCompleted = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.initialClaimableAmount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.actionCompleted.push(reader.bool());
                        }
                    }
                    else {
                        message.actionCompleted.push(reader.bool());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseClaimRecord);
        message.initialClaimableAmount = [];
        message.actionCompleted = [];
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.initialClaimableAmount !== undefined &&
            object.initialClaimableAmount !== null) {
            for (var _i = 0, _a = object.initialClaimableAmount; _i < _a.length; _i++) {
                var e = _a[_i];
                message.initialClaimableAmount.push(coin_1.Coin.fromJSON(e));
            }
        }
        if (object.actionCompleted !== undefined &&
            object.actionCompleted !== null) {
            for (var _b = 0, _c = object.actionCompleted; _b < _c.length; _b++) {
                var e = _c[_b];
                message.actionCompleted.push(Boolean(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseClaimRecord);
        message.initialClaimableAmount = [];
        message.actionCompleted = [];
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.initialClaimableAmount !== undefined &&
            object.initialClaimableAmount !== null) {
            for (var _i = 0, _a = object.initialClaimableAmount; _i < _a.length; _i++) {
                var e = _a[_i];
                message.initialClaimableAmount.push(coin_1.Coin.fromPartial(e));
            }
        }
        if (object.actionCompleted !== undefined &&
            object.actionCompleted !== null) {
            for (var _b = 0, _c = object.actionCompleted; _b < _c.length; _b++) {
                var e = _c[_b];
                message.actionCompleted.push(e);
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        if (message.initialClaimableAmount) {
            obj.initialClaimableAmount = message.initialClaimableAmount.map(function (e) {
                return e ? coin_1.Coin.toJSON(e) : undefined;
            });
        }
        else {
            obj.initialClaimableAmount = [];
        }
        if (message.actionCompleted) {
            obj.actionCompleted = message.actionCompleted.map(function (e) { return e; });
        }
        else {
            obj.actionCompleted = [];
        }
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
