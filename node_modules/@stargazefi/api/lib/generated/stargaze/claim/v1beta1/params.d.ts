import { Action } from "../../../stargaze/claim/v1beta1/claim_record";
import { Duration } from "../../../google/protobuf/duration";
import * as Long from "long";
import { Writer, Reader } from "protobufjs/minimal";
export declare const protobufPackage = "publicawesome.stargaze.claim.v1beta1";
export interface ClaimAuthorization {
    contractAddress: string;
    action: Action;
}
/** Params defines the claim module's parameters. */
export interface Params {
    airdropEnabled: boolean;
    airdropStartTime?: Date;
    durationUntilDecay?: Duration;
    durationOfDecay?: Duration;
    /** denom of claimable asset */
    claimDenom: string;
    /** list of contracts and their allowed claim actions */
    allowedClaimers: ClaimAuthorization[];
}
export declare const ClaimAuthorization: {
    encode(message: ClaimAuthorization, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): ClaimAuthorization;
    fromJSON(object: any): ClaimAuthorization;
    fromPartial(object: DeepPartial<ClaimAuthorization>): ClaimAuthorization;
    toJSON(message: ClaimAuthorization): unknown;
};
export declare const Params: {
    encode(message: Params, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    fromPartial(object: DeepPartial<Params>): Params;
    toJSON(message: Params): unknown;
};
declare type Builtin = Date | Function | Uint8Array | string | number | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
