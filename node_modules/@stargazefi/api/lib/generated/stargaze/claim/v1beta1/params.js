"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Params = exports.ClaimAuthorization = exports.protobufPackage = void 0;
/* eslint-disable */
var claim_record_1 = require("../../../stargaze/claim/v1beta1/claim_record");
var duration_1 = require("../../../google/protobuf/duration");
var timestamp_1 = require("../../../google/protobuf/timestamp");
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "publicawesome.stargaze.claim.v1beta1";
var baseClaimAuthorization = { contractAddress: "", action: 0 };
exports.ClaimAuthorization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.action !== 0) {
            writer.uint32(16).int32(message.action);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseClaimAuthorization);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.action = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseClaimAuthorization);
        if (object.contractAddress !== undefined &&
            object.contractAddress !== null) {
            message.contractAddress = String(object.contractAddress);
        }
        else {
            message.contractAddress = "";
        }
        if (object.action !== undefined && object.action !== null) {
            message.action = claim_record_1.actionFromJSON(object.action);
        }
        else {
            message.action = 0;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseClaimAuthorization);
        if (object.contractAddress !== undefined &&
            object.contractAddress !== null) {
            message.contractAddress = object.contractAddress;
        }
        else {
            message.contractAddress = "";
        }
        if (object.action !== undefined && object.action !== null) {
            message.action = object.action;
        }
        else {
            message.action = 0;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.contractAddress !== undefined &&
            (obj.contractAddress = message.contractAddress);
        message.action !== undefined && (obj.action = claim_record_1.actionToJSON(message.action));
        return obj;
    }
};
var baseParams = { airdropEnabled: false, claimDenom: "" };
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.airdropEnabled === true) {
            writer.uint32(8).bool(message.airdropEnabled);
        }
        if (message.airdropStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.airdropStartTime), writer.uint32(18).fork()).ldelim();
        }
        if (message.durationUntilDecay !== undefined) {
            duration_1.Duration.encode(message.durationUntilDecay, writer.uint32(26).fork()).ldelim();
        }
        if (message.durationOfDecay !== undefined) {
            duration_1.Duration.encode(message.durationOfDecay, writer.uint32(34).fork()).ldelim();
        }
        if (message.claimDenom !== "") {
            writer.uint32(42).string(message.claimDenom);
        }
        for (var _i = 0, _a = message.allowedClaimers; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.ClaimAuthorization.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseParams);
        message.allowedClaimers = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropEnabled = reader.bool();
                    break;
                case 2:
                    message.airdropStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.durationUntilDecay = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.durationOfDecay = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.claimDenom = reader.string();
                    break;
                case 6:
                    message.allowedClaimers.push(exports.ClaimAuthorization.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseParams);
        message.allowedClaimers = [];
        if (object.airdropEnabled !== undefined && object.airdropEnabled !== null) {
            message.airdropEnabled = Boolean(object.airdropEnabled);
        }
        else {
            message.airdropEnabled = false;
        }
        if (object.airdropStartTime !== undefined &&
            object.airdropStartTime !== null) {
            message.airdropStartTime = fromJsonTimestamp(object.airdropStartTime);
        }
        else {
            message.airdropStartTime = undefined;
        }
        if (object.durationUntilDecay !== undefined &&
            object.durationUntilDecay !== null) {
            message.durationUntilDecay = duration_1.Duration.fromJSON(object.durationUntilDecay);
        }
        else {
            message.durationUntilDecay = undefined;
        }
        if (object.durationOfDecay !== undefined &&
            object.durationOfDecay !== null) {
            message.durationOfDecay = duration_1.Duration.fromJSON(object.durationOfDecay);
        }
        else {
            message.durationOfDecay = undefined;
        }
        if (object.claimDenom !== undefined && object.claimDenom !== null) {
            message.claimDenom = String(object.claimDenom);
        }
        else {
            message.claimDenom = "";
        }
        if (object.allowedClaimers !== undefined &&
            object.allowedClaimers !== null) {
            for (var _i = 0, _a = object.allowedClaimers; _i < _a.length; _i++) {
                var e = _a[_i];
                message.allowedClaimers.push(exports.ClaimAuthorization.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseParams);
        message.allowedClaimers = [];
        if (object.airdropEnabled !== undefined && object.airdropEnabled !== null) {
            message.airdropEnabled = object.airdropEnabled;
        }
        else {
            message.airdropEnabled = false;
        }
        if (object.airdropStartTime !== undefined &&
            object.airdropStartTime !== null) {
            message.airdropStartTime = object.airdropStartTime;
        }
        else {
            message.airdropStartTime = undefined;
        }
        if (object.durationUntilDecay !== undefined &&
            object.durationUntilDecay !== null) {
            message.durationUntilDecay = duration_1.Duration.fromPartial(object.durationUntilDecay);
        }
        else {
            message.durationUntilDecay = undefined;
        }
        if (object.durationOfDecay !== undefined &&
            object.durationOfDecay !== null) {
            message.durationOfDecay = duration_1.Duration.fromPartial(object.durationOfDecay);
        }
        else {
            message.durationOfDecay = undefined;
        }
        if (object.claimDenom !== undefined && object.claimDenom !== null) {
            message.claimDenom = object.claimDenom;
        }
        else {
            message.claimDenom = "";
        }
        if (object.allowedClaimers !== undefined &&
            object.allowedClaimers !== null) {
            for (var _i = 0, _a = object.allowedClaimers; _i < _a.length; _i++) {
                var e = _a[_i];
                message.allowedClaimers.push(exports.ClaimAuthorization.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.airdropEnabled !== undefined &&
            (obj.airdropEnabled = message.airdropEnabled);
        message.airdropStartTime !== undefined &&
            (obj.airdropStartTime =
                message.airdropStartTime !== undefined
                    ? message.airdropStartTime.toISOString()
                    : null);
        message.durationUntilDecay !== undefined &&
            (obj.durationUntilDecay = message.durationUntilDecay
                ? duration_1.Duration.toJSON(message.durationUntilDecay)
                : undefined);
        message.durationOfDecay !== undefined &&
            (obj.durationOfDecay = message.durationOfDecay
                ? duration_1.Duration.toJSON(message.durationOfDecay)
                : undefined);
        message.claimDenom !== undefined && (obj.claimDenom = message.claimDenom);
        if (message.allowedClaimers) {
            obj.allowedClaimers = message.allowedClaimers.map(function (e) {
                return e ? exports.ClaimAuthorization.toJSON(e) : undefined;
            });
        }
        else {
            obj.allowedClaimers = [];
        }
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
if (minimal_1.util.Long !== Long) {
    minimal_1.util.Long = Long;
    minimal_1.configure();
}
