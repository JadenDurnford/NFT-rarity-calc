"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.QueryClientImpl = exports.QueryTotalClaimableResponse = exports.QueryTotalClaimableRequest = exports.QueryClaimableForActionResponse = exports.QueryClaimableForActionRequest = exports.QueryClaimRecordResponse = exports.QueryClaimRecordRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryModuleAccountBalanceResponse = exports.QueryModuleAccountBalanceRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var params_1 = require("../../../stargaze/claim/v1beta1/params");
var claim_record_1 = require("../../../stargaze/claim/v1beta1/claim_record");
var minimal_1 = require("protobufjs/minimal");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "publicawesome.stargaze.claim.v1beta1";
var baseQueryModuleAccountBalanceRequest = {};
exports.QueryModuleAccountBalanceRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryModuleAccountBalanceRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseQueryModuleAccountBalanceRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseQueryModuleAccountBalanceRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseQueryModuleAccountBalanceResponse = {};
exports.QueryModuleAccountBalanceResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.moduleAccountBalance; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryModuleAccountBalanceResponse);
        message.moduleAccountBalance = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.moduleAccountBalance.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryModuleAccountBalanceResponse);
        message.moduleAccountBalance = [];
        if (object.moduleAccountBalance !== undefined &&
            object.moduleAccountBalance !== null) {
            for (var _i = 0, _a = object.moduleAccountBalance; _i < _a.length; _i++) {
                var e = _a[_i];
                message.moduleAccountBalance.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryModuleAccountBalanceResponse);
        message.moduleAccountBalance = [];
        if (object.moduleAccountBalance !== undefined &&
            object.moduleAccountBalance !== null) {
            for (var _i = 0, _a = object.moduleAccountBalance; _i < _a.length; _i++) {
                var e = _a[_i];
                message.moduleAccountBalance.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.moduleAccountBalance) {
            obj.moduleAccountBalance = message.moduleAccountBalance.map(function (e) {
                return e ? coin_1.Coin.toJSON(e) : undefined;
            });
        }
        else {
            obj.moduleAccountBalance = [];
        }
        return obj;
    }
};
var baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryParamsRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = globalThis.Object.create(baseQueryParamsRequest);
        return message;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    }
};
var baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryParamsResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    }
};
var baseQueryClaimRecordRequest = { address: "" };
exports.QueryClaimRecordRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryClaimRecordRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryClaimRecordRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryClaimRecordRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
};
var baseQueryClaimRecordResponse = {};
exports.QueryClaimRecordResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.claimRecord !== undefined) {
            claim_record_1.ClaimRecord.encode(message.claimRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryClaimRecordResponse);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.claimRecord = claim_record_1.ClaimRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryClaimRecordResponse);
        if (object.claimRecord !== undefined && object.claimRecord !== null) {
            message.claimRecord = claim_record_1.ClaimRecord.fromJSON(object.claimRecord);
        }
        else {
            message.claimRecord = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryClaimRecordResponse);
        if (object.claimRecord !== undefined && object.claimRecord !== null) {
            message.claimRecord = claim_record_1.ClaimRecord.fromPartial(object.claimRecord);
        }
        else {
            message.claimRecord = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.claimRecord !== undefined &&
            (obj.claimRecord = message.claimRecord
                ? claim_record_1.ClaimRecord.toJSON(message.claimRecord)
                : undefined);
        return obj;
    }
};
var baseQueryClaimableForActionRequest = { address: "", action: 0 };
exports.QueryClaimableForActionRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.action !== 0) {
            writer.uint32(16).int32(message.action);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryClaimableForActionRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.action = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryClaimableForActionRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.action !== undefined && object.action !== null) {
            message.action = claim_record_1.actionFromJSON(object.action);
        }
        else {
            message.action = 0;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryClaimableForActionRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.action !== undefined && object.action !== null) {
            message.action = object.action;
        }
        else {
            message.action = 0;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.action !== undefined && (obj.action = claim_record_1.actionToJSON(message.action));
        return obj;
    }
};
var baseQueryClaimableForActionResponse = {};
exports.QueryClaimableForActionResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.coins; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryClaimableForActionResponse);
        message.coins = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryClaimableForActionResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (var _i = 0, _a = object.coins; _i < _a.length; _i++) {
                var e = _a[_i];
                message.coins.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryClaimableForActionResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (var _i = 0, _a = object.coins; _i < _a.length; _i++) {
                var e = _a[_i];
                message.coins.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.coins) {
            obj.coins = message.coins.map(function (e) { return (e ? coin_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.coins = [];
        }
        return obj;
    }
};
var baseQueryTotalClaimableRequest = { address: "" };
exports.QueryTotalClaimableRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryTotalClaimableRequest);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryTotalClaimableRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryTotalClaimableRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    }
};
var baseQueryTotalClaimableResponse = {};
exports.QueryTotalClaimableResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.coins; _i < _a.length; _i++) {
            var v = _a[_i];
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseQueryTotalClaimableResponse);
        message.coins = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseQueryTotalClaimableResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (var _i = 0, _a = object.coins; _i < _a.length; _i++) {
                var e = _a[_i];
                message.coins.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseQueryTotalClaimableResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (var _i = 0, _a = object.coins; _i < _a.length; _i++) {
                var e = _a[_i];
                message.coins.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.coins) {
            obj.coins = message.coins.map(function (e) { return (e ? coin_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.coins = [];
        }
        return obj;
    }
};
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc) {
        this.rpc = rpc;
    }
    QueryClientImpl.prototype.ModuleAccountBalance = function (request) {
        var data = exports.QueryModuleAccountBalanceRequest.encode(request).finish();
        var promise = this.rpc.request("publicawesome.stargaze.claim.v1beta1.Query", "ModuleAccountBalance", data);
        return promise.then(function (data) {
            return exports.QueryModuleAccountBalanceResponse.decode(new minimal_1.Reader(data));
        });
    };
    QueryClientImpl.prototype.Params = function (request) {
        var data = exports.QueryParamsRequest.encode(request).finish();
        var promise = this.rpc.request("publicawesome.stargaze.claim.v1beta1.Query", "Params", data);
        return promise.then(function (data) { return exports.QueryParamsResponse.decode(new minimal_1.Reader(data)); });
    };
    QueryClientImpl.prototype.ClaimRecord = function (request) {
        var data = exports.QueryClaimRecordRequest.encode(request).finish();
        var promise = this.rpc.request("publicawesome.stargaze.claim.v1beta1.Query", "ClaimRecord", data);
        return promise.then(function (data) {
            return exports.QueryClaimRecordResponse.decode(new minimal_1.Reader(data));
        });
    };
    QueryClientImpl.prototype.ClaimableForAction = function (request) {
        var data = exports.QueryClaimableForActionRequest.encode(request).finish();
        var promise = this.rpc.request("publicawesome.stargaze.claim.v1beta1.Query", "ClaimableForAction", data);
        return promise.then(function (data) {
            return exports.QueryClaimableForActionResponse.decode(new minimal_1.Reader(data));
        });
    };
    QueryClientImpl.prototype.TotalClaimable = function (request) {
        var data = exports.QueryTotalClaimableRequest.encode(request).finish();
        var promise = this.rpc.request("publicawesome.stargaze.claim.v1beta1.Query", "TotalClaimable", data);
        return promise.then(function (data) {
            return exports.QueryTotalClaimableResponse.decode(new minimal_1.Reader(data));
        });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
