"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Params = exports.Minter = exports.protobufPackage = void 0;
/* eslint-disable */
var Long = require("long");
var timestamp_1 = require("../../../google/protobuf/timestamp");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "stargaze.mint.v1beta1";
var baseMinter = { annualProvisions: "" };
exports.Minter = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.annualProvisions !== "") {
            writer.uint32(10).string(message.annualProvisions);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseMinter);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.annualProvisions = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseMinter);
        if (object.annualProvisions !== undefined &&
            object.annualProvisions !== null) {
            message.annualProvisions = String(object.annualProvisions);
        }
        else {
            message.annualProvisions = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMinter);
        if (object.annualProvisions !== undefined &&
            object.annualProvisions !== null) {
            message.annualProvisions = object.annualProvisions;
        }
        else {
            message.annualProvisions = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.annualProvisions !== undefined &&
            (obj.annualProvisions = message.annualProvisions);
        return obj;
    }
};
var baseParams = {
    mintDenom: "",
    initialAnnualProvisions: "",
    reductionFactor: "",
    blocksPerYear: Long.UZERO
};
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.mintDenom !== "") {
            writer.uint32(10).string(message.mintDenom);
        }
        if (message.startTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).ldelim();
        }
        if (message.initialAnnualProvisions !== "") {
            writer.uint32(26).string(message.initialAnnualProvisions);
        }
        if (message.reductionFactor !== "") {
            writer.uint32(34).string(message.reductionFactor);
        }
        if (!message.blocksPerYear.isZero()) {
            writer.uint32(40).uint64(message.blocksPerYear);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseParams);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mintDenom = reader.string();
                    break;
                case 2:
                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.initialAnnualProvisions = reader.string();
                    break;
                case 4:
                    message.reductionFactor = reader.string();
                    break;
                case 5:
                    message.blocksPerYear = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseParams);
        if (object.mintDenom !== undefined && object.mintDenom !== null) {
            message.mintDenom = String(object.mintDenom);
        }
        else {
            message.mintDenom = "";
        }
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = fromJsonTimestamp(object.startTime);
        }
        else {
            message.startTime = undefined;
        }
        if (object.initialAnnualProvisions !== undefined &&
            object.initialAnnualProvisions !== null) {
            message.initialAnnualProvisions = String(object.initialAnnualProvisions);
        }
        else {
            message.initialAnnualProvisions = "";
        }
        if (object.reductionFactor !== undefined &&
            object.reductionFactor !== null) {
            message.reductionFactor = String(object.reductionFactor);
        }
        else {
            message.reductionFactor = "";
        }
        if (object.blocksPerYear !== undefined && object.blocksPerYear !== null) {
            message.blocksPerYear = Long.fromString(object.blocksPerYear);
        }
        else {
            message.blocksPerYear = Long.UZERO;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseParams);
        if (object.mintDenom !== undefined && object.mintDenom !== null) {
            message.mintDenom = object.mintDenom;
        }
        else {
            message.mintDenom = "";
        }
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = object.startTime;
        }
        else {
            message.startTime = undefined;
        }
        if (object.initialAnnualProvisions !== undefined &&
            object.initialAnnualProvisions !== null) {
            message.initialAnnualProvisions = object.initialAnnualProvisions;
        }
        else {
            message.initialAnnualProvisions = "";
        }
        if (object.reductionFactor !== undefined &&
            object.reductionFactor !== null) {
            message.reductionFactor = object.reductionFactor;
        }
        else {
            message.reductionFactor = "";
        }
        if (object.blocksPerYear !== undefined && object.blocksPerYear !== null) {
            message.blocksPerYear = object.blocksPerYear;
        }
        else {
            message.blocksPerYear = Long.UZERO;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mintDenom !== undefined && (obj.mintDenom = message.mintDenom);
        message.startTime !== undefined &&
            (obj.startTime =
                message.startTime !== undefined
                    ? message.startTime.toISOString()
                    : null);
        message.initialAnnualProvisions !== undefined &&
            (obj.initialAnnualProvisions = message.initialAnnualProvisions);
        message.reductionFactor !== undefined &&
            (obj.reductionFactor = message.reductionFactor);
        message.blocksPerYear !== undefined &&
            (obj.blocksPerYear = (message.blocksPerYear || Long.UZERO).toString());
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
if (minimal_1.util.Long !== Long) {
    minimal_1.util.Long = Long;
    minimal_1.configure();
}
