"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.DefaultNodeInfoOther = exports.DefaultNodeInfo = exports.ProtocolVersion = exports.NetAddress = exports.protobufPackage = void 0;
/* eslint-disable */
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "tendermint.p2p";
var baseNetAddress = { id: "", ip: "", port: 0 };
exports.NetAddress = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.ip !== "") {
            writer.uint32(18).string(message.ip);
        }
        if (message.port !== 0) {
            writer.uint32(24).uint32(message.port);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseNetAddress);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.ip = reader.string();
                    break;
                case 3:
                    message.port = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseNetAddress);
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        if (object.ip !== undefined && object.ip !== null) {
            message.ip = String(object.ip);
        }
        else {
            message.ip = "";
        }
        if (object.port !== undefined && object.port !== null) {
            message.port = Number(object.port);
        }
        else {
            message.port = 0;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseNetAddress);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        if (object.ip !== undefined && object.ip !== null) {
            message.ip = object.ip;
        }
        else {
            message.ip = "";
        }
        if (object.port !== undefined && object.port !== null) {
            message.port = object.port;
        }
        else {
            message.port = 0;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.ip !== undefined && (obj.ip = message.ip);
        message.port !== undefined && (obj.port = message.port);
        return obj;
    }
};
var baseProtocolVersion = {
    p2p: Long.UZERO,
    block: Long.UZERO,
    app: Long.UZERO
};
exports.ProtocolVersion = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.p2p.isZero()) {
            writer.uint32(8).uint64(message.p2p);
        }
        if (!message.block.isZero()) {
            writer.uint32(16).uint64(message.block);
        }
        if (!message.app.isZero()) {
            writer.uint32(24).uint64(message.app);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseProtocolVersion);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.p2p = reader.uint64();
                    break;
                case 2:
                    message.block = reader.uint64();
                    break;
                case 3:
                    message.app = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseProtocolVersion);
        if (object.p2p !== undefined && object.p2p !== null) {
            message.p2p = Long.fromString(object.p2p);
        }
        else {
            message.p2p = Long.UZERO;
        }
        if (object.block !== undefined && object.block !== null) {
            message.block = Long.fromString(object.block);
        }
        else {
            message.block = Long.UZERO;
        }
        if (object.app !== undefined && object.app !== null) {
            message.app = Long.fromString(object.app);
        }
        else {
            message.app = Long.UZERO;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseProtocolVersion);
        if (object.p2p !== undefined && object.p2p !== null) {
            message.p2p = object.p2p;
        }
        else {
            message.p2p = Long.UZERO;
        }
        if (object.block !== undefined && object.block !== null) {
            message.block = object.block;
        }
        else {
            message.block = Long.UZERO;
        }
        if (object.app !== undefined && object.app !== null) {
            message.app = object.app;
        }
        else {
            message.app = Long.UZERO;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.p2p !== undefined &&
            (obj.p2p = (message.p2p || Long.UZERO).toString());
        message.block !== undefined &&
            (obj.block = (message.block || Long.UZERO).toString());
        message.app !== undefined &&
            (obj.app = (message.app || Long.UZERO).toString());
        return obj;
    }
};
var baseDefaultNodeInfo = {
    defaultNodeId: "",
    listenAddr: "",
    network: "",
    version: "",
    moniker: ""
};
exports.DefaultNodeInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.protocolVersion !== undefined) {
            exports.ProtocolVersion.encode(message.protocolVersion, writer.uint32(10).fork()).ldelim();
        }
        if (message.defaultNodeId !== "") {
            writer.uint32(18).string(message.defaultNodeId);
        }
        if (message.listenAddr !== "") {
            writer.uint32(26).string(message.listenAddr);
        }
        if (message.network !== "") {
            writer.uint32(34).string(message.network);
        }
        if (message.version !== "") {
            writer.uint32(42).string(message.version);
        }
        if (message.channels.length !== 0) {
            writer.uint32(50).bytes(message.channels);
        }
        if (message.moniker !== "") {
            writer.uint32(58).string(message.moniker);
        }
        if (message.other !== undefined) {
            exports.DefaultNodeInfoOther.encode(message.other, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseDefaultNodeInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.protocolVersion = exports.ProtocolVersion.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.defaultNodeId = reader.string();
                    break;
                case 3:
                    message.listenAddr = reader.string();
                    break;
                case 4:
                    message.network = reader.string();
                    break;
                case 5:
                    message.version = reader.string();
                    break;
                case 6:
                    message.channels = reader.bytes();
                    break;
                case 7:
                    message.moniker = reader.string();
                    break;
                case 8:
                    message.other = exports.DefaultNodeInfoOther.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseDefaultNodeInfo);
        if (object.protocolVersion !== undefined &&
            object.protocolVersion !== null) {
            message.protocolVersion = exports.ProtocolVersion.fromJSON(object.protocolVersion);
        }
        else {
            message.protocolVersion = undefined;
        }
        if (object.defaultNodeId !== undefined && object.defaultNodeId !== null) {
            message.defaultNodeId = String(object.defaultNodeId);
        }
        else {
            message.defaultNodeId = "";
        }
        if (object.listenAddr !== undefined && object.listenAddr !== null) {
            message.listenAddr = String(object.listenAddr);
        }
        else {
            message.listenAddr = "";
        }
        if (object.network !== undefined && object.network !== null) {
            message.network = String(object.network);
        }
        else {
            message.network = "";
        }
        if (object.version !== undefined && object.version !== null) {
            message.version = String(object.version);
        }
        else {
            message.version = "";
        }
        if (object.channels !== undefined && object.channels !== null) {
            message.channels = bytesFromBase64(object.channels);
        }
        if (object.moniker !== undefined && object.moniker !== null) {
            message.moniker = String(object.moniker);
        }
        else {
            message.moniker = "";
        }
        if (object.other !== undefined && object.other !== null) {
            message.other = exports.DefaultNodeInfoOther.fromJSON(object.other);
        }
        else {
            message.other = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDefaultNodeInfo);
        if (object.protocolVersion !== undefined &&
            object.protocolVersion !== null) {
            message.protocolVersion = exports.ProtocolVersion.fromPartial(object.protocolVersion);
        }
        else {
            message.protocolVersion = undefined;
        }
        if (object.defaultNodeId !== undefined && object.defaultNodeId !== null) {
            message.defaultNodeId = object.defaultNodeId;
        }
        else {
            message.defaultNodeId = "";
        }
        if (object.listenAddr !== undefined && object.listenAddr !== null) {
            message.listenAddr = object.listenAddr;
        }
        else {
            message.listenAddr = "";
        }
        if (object.network !== undefined && object.network !== null) {
            message.network = object.network;
        }
        else {
            message.network = "";
        }
        if (object.version !== undefined && object.version !== null) {
            message.version = object.version;
        }
        else {
            message.version = "";
        }
        if (object.channels !== undefined && object.channels !== null) {
            message.channels = object.channels;
        }
        else {
            message.channels = new Uint8Array();
        }
        if (object.moniker !== undefined && object.moniker !== null) {
            message.moniker = object.moniker;
        }
        else {
            message.moniker = "";
        }
        if (object.other !== undefined && object.other !== null) {
            message.other = exports.DefaultNodeInfoOther.fromPartial(object.other);
        }
        else {
            message.other = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.protocolVersion !== undefined &&
            (obj.protocolVersion = message.protocolVersion
                ? exports.ProtocolVersion.toJSON(message.protocolVersion)
                : undefined);
        message.defaultNodeId !== undefined &&
            (obj.defaultNodeId = message.defaultNodeId);
        message.listenAddr !== undefined && (obj.listenAddr = message.listenAddr);
        message.network !== undefined && (obj.network = message.network);
        message.version !== undefined && (obj.version = message.version);
        message.channels !== undefined &&
            (obj.channels = base64FromBytes(message.channels !== undefined ? message.channels : new Uint8Array()));
        message.moniker !== undefined && (obj.moniker = message.moniker);
        message.other !== undefined &&
            (obj.other = message.other
                ? exports.DefaultNodeInfoOther.toJSON(message.other)
                : undefined);
        return obj;
    }
};
var baseDefaultNodeInfoOther = { txIndex: "", rpcAddress: "" };
exports.DefaultNodeInfoOther = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.txIndex !== "") {
            writer.uint32(10).string(message.txIndex);
        }
        if (message.rpcAddress !== "") {
            writer.uint32(18).string(message.rpcAddress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseDefaultNodeInfoOther);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txIndex = reader.string();
                    break;
                case 2:
                    message.rpcAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseDefaultNodeInfoOther);
        if (object.txIndex !== undefined && object.txIndex !== null) {
            message.txIndex = String(object.txIndex);
        }
        else {
            message.txIndex = "";
        }
        if (object.rpcAddress !== undefined && object.rpcAddress !== null) {
            message.rpcAddress = String(object.rpcAddress);
        }
        else {
            message.rpcAddress = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDefaultNodeInfoOther);
        if (object.txIndex !== undefined && object.txIndex !== null) {
            message.txIndex = object.txIndex;
        }
        else {
            message.txIndex = "";
        }
        if (object.rpcAddress !== undefined && object.rpcAddress !== null) {
            message.rpcAddress = object.rpcAddress;
        }
        else {
            message.rpcAddress = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.txIndex !== undefined && (obj.txIndex = message.txIndex);
        message.rpcAddress !== undefined && (obj.rpcAddress = message.rpcAddress);
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, "base64").toString("binary"); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, "binary").toString("base64"); });
function base64FromBytes(arr) {
    var bin = [];
    for (var i = 0; i < arr.byteLength; ++i) {
        bin.push(String.fromCharCode(arr[i]));
    }
    return btoa(bin.join(""));
}
