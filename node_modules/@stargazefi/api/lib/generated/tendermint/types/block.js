"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Block = exports.protobufPackage = void 0;
/* eslint-disable */
var types_1 = require("../../tendermint/types/types");
var evidence_1 = require("../../tendermint/types/evidence");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "tendermint.types";
var baseBlock = {};
exports.Block = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.header !== undefined) {
            types_1.Header.encode(message.header, writer.uint32(10).fork()).ldelim();
        }
        if (message.data !== undefined) {
            types_1.Data.encode(message.data, writer.uint32(18).fork()).ldelim();
        }
        if (message.evidence !== undefined) {
            evidence_1.EvidenceList.encode(message.evidence, writer.uint32(26).fork()).ldelim();
        }
        if (message.lastCommit !== undefined) {
            types_1.Commit.encode(message.lastCommit, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseBlock);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.header = types_1.Header.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.data = types_1.Data.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.evidence = evidence_1.EvidenceList.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.lastCommit = types_1.Commit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseBlock);
        if (object.header !== undefined && object.header !== null) {
            message.header = types_1.Header.fromJSON(object.header);
        }
        else {
            message.header = undefined;
        }
        if (object.data !== undefined && object.data !== null) {
            message.data = types_1.Data.fromJSON(object.data);
        }
        else {
            message.data = undefined;
        }
        if (object.evidence !== undefined && object.evidence !== null) {
            message.evidence = evidence_1.EvidenceList.fromJSON(object.evidence);
        }
        else {
            message.evidence = undefined;
        }
        if (object.lastCommit !== undefined && object.lastCommit !== null) {
            message.lastCommit = types_1.Commit.fromJSON(object.lastCommit);
        }
        else {
            message.lastCommit = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseBlock);
        if (object.header !== undefined && object.header !== null) {
            message.header = types_1.Header.fromPartial(object.header);
        }
        else {
            message.header = undefined;
        }
        if (object.data !== undefined && object.data !== null) {
            message.data = types_1.Data.fromPartial(object.data);
        }
        else {
            message.data = undefined;
        }
        if (object.evidence !== undefined && object.evidence !== null) {
            message.evidence = evidence_1.EvidenceList.fromPartial(object.evidence);
        }
        else {
            message.evidence = undefined;
        }
        if (object.lastCommit !== undefined && object.lastCommit !== null) {
            message.lastCommit = types_1.Commit.fromPartial(object.lastCommit);
        }
        else {
            message.lastCommit = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.header !== undefined &&
            (obj.header = message.header ? types_1.Header.toJSON(message.header) : undefined);
        message.data !== undefined &&
            (obj.data = message.data ? types_1.Data.toJSON(message.data) : undefined);
        message.evidence !== undefined &&
            (obj.evidence = message.evidence
                ? evidence_1.EvidenceList.toJSON(message.evidence)
                : undefined);
        message.lastCommit !== undefined &&
            (obj.lastCommit = message.lastCommit
                ? types_1.Commit.toJSON(message.lastCommit)
                : undefined);
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
