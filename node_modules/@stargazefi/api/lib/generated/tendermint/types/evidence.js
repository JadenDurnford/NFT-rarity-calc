"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.EvidenceList = exports.LightClientAttackEvidence = exports.DuplicateVoteEvidence = exports.Evidence = exports.protobufPackage = void 0;
/* eslint-disable */
var types_1 = require("../../tendermint/types/types");
var Long = require("long");
var timestamp_1 = require("../../google/protobuf/timestamp");
var minimal_1 = require("protobufjs/minimal");
var validator_1 = require("../../tendermint/types/validator");
exports.protobufPackage = "tendermint.types";
var baseEvidence = {};
exports.Evidence = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.duplicateVoteEvidence !== undefined) {
            exports.DuplicateVoteEvidence.encode(message.duplicateVoteEvidence, writer.uint32(10).fork()).ldelim();
        }
        if (message.lightClientAttackEvidence !== undefined) {
            exports.LightClientAttackEvidence.encode(message.lightClientAttackEvidence, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseEvidence);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.duplicateVoteEvidence = exports.DuplicateVoteEvidence.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lightClientAttackEvidence = exports.LightClientAttackEvidence.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseEvidence);
        if (object.duplicateVoteEvidence !== undefined &&
            object.duplicateVoteEvidence !== null) {
            message.duplicateVoteEvidence = exports.DuplicateVoteEvidence.fromJSON(object.duplicateVoteEvidence);
        }
        else {
            message.duplicateVoteEvidence = undefined;
        }
        if (object.lightClientAttackEvidence !== undefined &&
            object.lightClientAttackEvidence !== null) {
            message.lightClientAttackEvidence = exports.LightClientAttackEvidence.fromJSON(object.lightClientAttackEvidence);
        }
        else {
            message.lightClientAttackEvidence = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseEvidence);
        if (object.duplicateVoteEvidence !== undefined &&
            object.duplicateVoteEvidence !== null) {
            message.duplicateVoteEvidence = exports.DuplicateVoteEvidence.fromPartial(object.duplicateVoteEvidence);
        }
        else {
            message.duplicateVoteEvidence = undefined;
        }
        if (object.lightClientAttackEvidence !== undefined &&
            object.lightClientAttackEvidence !== null) {
            message.lightClientAttackEvidence = exports.LightClientAttackEvidence.fromPartial(object.lightClientAttackEvidence);
        }
        else {
            message.lightClientAttackEvidence = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.duplicateVoteEvidence !== undefined &&
            (obj.duplicateVoteEvidence = message.duplicateVoteEvidence
                ? exports.DuplicateVoteEvidence.toJSON(message.duplicateVoteEvidence)
                : undefined);
        message.lightClientAttackEvidence !== undefined &&
            (obj.lightClientAttackEvidence = message.lightClientAttackEvidence
                ? exports.LightClientAttackEvidence.toJSON(message.lightClientAttackEvidence)
                : undefined);
        return obj;
    }
};
var baseDuplicateVoteEvidence = {
    totalVotingPower: Long.ZERO,
    validatorPower: Long.ZERO
};
exports.DuplicateVoteEvidence = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.voteA !== undefined) {
            types_1.Vote.encode(message.voteA, writer.uint32(10).fork()).ldelim();
        }
        if (message.voteB !== undefined) {
            types_1.Vote.encode(message.voteB, writer.uint32(18).fork()).ldelim();
        }
        if (!message.totalVotingPower.isZero()) {
            writer.uint32(24).int64(message.totalVotingPower);
        }
        if (!message.validatorPower.isZero()) {
            writer.uint32(32).int64(message.validatorPower);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseDuplicateVoteEvidence);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.voteA = types_1.Vote.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.voteB = types_1.Vote.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.totalVotingPower = reader.int64();
                    break;
                case 4:
                    message.validatorPower = reader.int64();
                    break;
                case 5:
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseDuplicateVoteEvidence);
        if (object.voteA !== undefined && object.voteA !== null) {
            message.voteA = types_1.Vote.fromJSON(object.voteA);
        }
        else {
            message.voteA = undefined;
        }
        if (object.voteB !== undefined && object.voteB !== null) {
            message.voteB = types_1.Vote.fromJSON(object.voteB);
        }
        else {
            message.voteB = undefined;
        }
        if (object.totalVotingPower !== undefined &&
            object.totalVotingPower !== null) {
            message.totalVotingPower = Long.fromString(object.totalVotingPower);
        }
        else {
            message.totalVotingPower = Long.ZERO;
        }
        if (object.validatorPower !== undefined && object.validatorPower !== null) {
            message.validatorPower = Long.fromString(object.validatorPower);
        }
        else {
            message.validatorPower = Long.ZERO;
        }
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = fromJsonTimestamp(object.timestamp);
        }
        else {
            message.timestamp = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDuplicateVoteEvidence);
        if (object.voteA !== undefined && object.voteA !== null) {
            message.voteA = types_1.Vote.fromPartial(object.voteA);
        }
        else {
            message.voteA = undefined;
        }
        if (object.voteB !== undefined && object.voteB !== null) {
            message.voteB = types_1.Vote.fromPartial(object.voteB);
        }
        else {
            message.voteB = undefined;
        }
        if (object.totalVotingPower !== undefined &&
            object.totalVotingPower !== null) {
            message.totalVotingPower = object.totalVotingPower;
        }
        else {
            message.totalVotingPower = Long.ZERO;
        }
        if (object.validatorPower !== undefined && object.validatorPower !== null) {
            message.validatorPower = object.validatorPower;
        }
        else {
            message.validatorPower = Long.ZERO;
        }
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = object.timestamp;
        }
        else {
            message.timestamp = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.voteA !== undefined &&
            (obj.voteA = message.voteA ? types_1.Vote.toJSON(message.voteA) : undefined);
        message.voteB !== undefined &&
            (obj.voteB = message.voteB ? types_1.Vote.toJSON(message.voteB) : undefined);
        message.totalVotingPower !== undefined &&
            (obj.totalVotingPower = (message.totalVotingPower || Long.ZERO).toString());
        message.validatorPower !== undefined &&
            (obj.validatorPower = (message.validatorPower || Long.ZERO).toString());
        message.timestamp !== undefined &&
            (obj.timestamp =
                message.timestamp !== undefined
                    ? message.timestamp.toISOString()
                    : null);
        return obj;
    }
};
var baseLightClientAttackEvidence = {
    commonHeight: Long.ZERO,
    totalVotingPower: Long.ZERO
};
exports.LightClientAttackEvidence = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (message.conflictingBlock !== undefined) {
            types_1.LightBlock.encode(message.conflictingBlock, writer.uint32(10).fork()).ldelim();
        }
        if (!message.commonHeight.isZero()) {
            writer.uint32(16).int64(message.commonHeight);
        }
        for (var _i = 0, _a = message.byzantineValidators; _i < _a.length; _i++) {
            var v = _a[_i];
            validator_1.Validator.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (!message.totalVotingPower.isZero()) {
            writer.uint32(32).int64(message.totalVotingPower);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseLightClientAttackEvidence);
        message.byzantineValidators = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.conflictingBlock = types_1.LightBlock.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.commonHeight = reader.int64();
                    break;
                case 3:
                    message.byzantineValidators.push(validator_1.Validator.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.totalVotingPower = reader.int64();
                    break;
                case 5:
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseLightClientAttackEvidence);
        message.byzantineValidators = [];
        if (object.conflictingBlock !== undefined &&
            object.conflictingBlock !== null) {
            message.conflictingBlock = types_1.LightBlock.fromJSON(object.conflictingBlock);
        }
        else {
            message.conflictingBlock = undefined;
        }
        if (object.commonHeight !== undefined && object.commonHeight !== null) {
            message.commonHeight = Long.fromString(object.commonHeight);
        }
        else {
            message.commonHeight = Long.ZERO;
        }
        if (object.byzantineValidators !== undefined &&
            object.byzantineValidators !== null) {
            for (var _i = 0, _a = object.byzantineValidators; _i < _a.length; _i++) {
                var e = _a[_i];
                message.byzantineValidators.push(validator_1.Validator.fromJSON(e));
            }
        }
        if (object.totalVotingPower !== undefined &&
            object.totalVotingPower !== null) {
            message.totalVotingPower = Long.fromString(object.totalVotingPower);
        }
        else {
            message.totalVotingPower = Long.ZERO;
        }
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = fromJsonTimestamp(object.timestamp);
        }
        else {
            message.timestamp = undefined;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseLightClientAttackEvidence);
        message.byzantineValidators = [];
        if (object.conflictingBlock !== undefined &&
            object.conflictingBlock !== null) {
            message.conflictingBlock = types_1.LightBlock.fromPartial(object.conflictingBlock);
        }
        else {
            message.conflictingBlock = undefined;
        }
        if (object.commonHeight !== undefined && object.commonHeight !== null) {
            message.commonHeight = object.commonHeight;
        }
        else {
            message.commonHeight = Long.ZERO;
        }
        if (object.byzantineValidators !== undefined &&
            object.byzantineValidators !== null) {
            for (var _i = 0, _a = object.byzantineValidators; _i < _a.length; _i++) {
                var e = _a[_i];
                message.byzantineValidators.push(validator_1.Validator.fromPartial(e));
            }
        }
        if (object.totalVotingPower !== undefined &&
            object.totalVotingPower !== null) {
            message.totalVotingPower = object.totalVotingPower;
        }
        else {
            message.totalVotingPower = Long.ZERO;
        }
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = object.timestamp;
        }
        else {
            message.timestamp = undefined;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.conflictingBlock !== undefined &&
            (obj.conflictingBlock = message.conflictingBlock
                ? types_1.LightBlock.toJSON(message.conflictingBlock)
                : undefined);
        message.commonHeight !== undefined &&
            (obj.commonHeight = (message.commonHeight || Long.ZERO).toString());
        if (message.byzantineValidators) {
            obj.byzantineValidators = message.byzantineValidators.map(function (e) {
                return e ? validator_1.Validator.toJSON(e) : undefined;
            });
        }
        else {
            obj.byzantineValidators = [];
        }
        message.totalVotingPower !== undefined &&
            (obj.totalVotingPower = (message.totalVotingPower || Long.ZERO).toString());
        message.timestamp !== undefined &&
            (obj.timestamp =
                message.timestamp !== undefined
                    ? message.timestamp.toISOString()
                    : null);
        return obj;
    }
};
var baseEvidenceList = {};
exports.EvidenceList = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        for (var _i = 0, _a = message.evidence; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Evidence.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseEvidenceList);
        message.evidence = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.evidence.push(exports.Evidence.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseEvidenceList);
        message.evidence = [];
        if (object.evidence !== undefined && object.evidence !== null) {
            for (var _i = 0, _a = object.evidence; _i < _a.length; _i++) {
                var e = _a[_i];
                message.evidence.push(exports.Evidence.fromJSON(e));
            }
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseEvidenceList);
        message.evidence = [];
        if (object.evidence !== undefined && object.evidence !== null) {
            for (var _i = 0, _a = object.evidence; _i < _a.length; _i++) {
                var e = _a[_i];
                message.evidence.push(exports.Evidence.fromPartial(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.evidence) {
            obj.evidence = message.evidence.map(function (e) {
                return e ? exports.Evidence.toJSON(e) : undefined;
            });
        }
        else {
            obj.evidence = [];
        }
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
if (minimal_1.util.Long !== Long) {
    minimal_1.util.Long = Long;
    minimal_1.configure();
}
