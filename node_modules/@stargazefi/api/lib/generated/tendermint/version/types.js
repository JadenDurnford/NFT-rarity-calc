"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.Consensus = exports.App = exports.protobufPackage = void 0;
/* eslint-disable */
var Long = require("long");
var minimal_1 = require("protobufjs/minimal");
exports.protobufPackage = "tendermint.version";
var baseApp = { protocol: Long.UZERO, software: "" };
exports.App = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.protocol.isZero()) {
            writer.uint32(8).uint64(message.protocol);
        }
        if (message.software !== "") {
            writer.uint32(18).string(message.software);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseApp);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.protocol = reader.uint64();
                    break;
                case 2:
                    message.software = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseApp);
        if (object.protocol !== undefined && object.protocol !== null) {
            message.protocol = Long.fromString(object.protocol);
        }
        else {
            message.protocol = Long.UZERO;
        }
        if (object.software !== undefined && object.software !== null) {
            message.software = String(object.software);
        }
        else {
            message.software = "";
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseApp);
        if (object.protocol !== undefined && object.protocol !== null) {
            message.protocol = object.protocol;
        }
        else {
            message.protocol = Long.UZERO;
        }
        if (object.software !== undefined && object.software !== null) {
            message.software = object.software;
        }
        else {
            message.software = "";
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.protocol !== undefined &&
            (obj.protocol = (message.protocol || Long.UZERO).toString());
        message.software !== undefined && (obj.software = message.software);
        return obj;
    }
};
var baseConsensus = { block: Long.UZERO, app: Long.UZERO };
exports.Consensus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.Writer.create(); }
        if (!message.block.isZero()) {
            writer.uint32(8).uint64(message.block);
        }
        if (!message.app.isZero()) {
            writer.uint32(16).uint64(message.app);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = globalThis.Object.create(baseConsensus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.block = reader.uint64();
                    break;
                case 2:
                    message.app = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = globalThis.Object.create(baseConsensus);
        if (object.block !== undefined && object.block !== null) {
            message.block = Long.fromString(object.block);
        }
        else {
            message.block = Long.UZERO;
        }
        if (object.app !== undefined && object.app !== null) {
            message.app = Long.fromString(object.app);
        }
        else {
            message.app = Long.UZERO;
        }
        return message;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseConsensus);
        if (object.block !== undefined && object.block !== null) {
            message.block = object.block;
        }
        else {
            message.block = Long.UZERO;
        }
        if (object.app !== undefined && object.app !== null) {
            message.app = object.app;
        }
        else {
            message.app = Long.UZERO;
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.block !== undefined &&
            (obj.block = (message.block || Long.UZERO).toString());
        message.app !== undefined &&
            (obj.app = (message.app || Long.UZERO).toString());
        return obj;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
